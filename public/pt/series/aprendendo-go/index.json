[{"content":"Orientação o objetos em Go Na linguagem Go é possível programar utilizando o paradigma de Orientação a objetos.\nTodavia, existem peculiaridades que tornam Go uma linguagem um pouco diferente de outras orientadas a objeto como o C Sharp e o Java.\nAlgumas diferenças Para começar, em Go não existem classes como no Java e C Sharp. Go também não faz uso de protótipos (prototypes) como no Javascript (antes da implementação classes no mesmo).\nTodavia, é possível criar objetos. Também é possível atribuir métodos aos objetos, de modo que possamos interagir com os mesmos.\nCriação e uso de objetos em Go Uma forma de criar objetos em Go é através do uso de Structs, mas isso será abordado em um próximo artigo.\nAntes disso, vamos entender melhor como funciona a orientação a objetos em GO de forma mais conceitual, criando variáveis que são objetos mais simples.\nUm exemplo de POO em Go Para facilitar o entendimento, utilizaremos como exemplo um programa de conversão de temperatura.\nNosso conversor de temperatura irá converter a temperatura de 300 graus na escala kelvin para as escalas celsius e fahrenheit.\nPara ilustrar de forma mais clara os conceitos que serão apresentados, nosso conversor de exemplo não fará a entrada do valor via console.\nIsso adicionaria mais complexidade, pois teríamos que tratar possíveis erros na entrada de dados pelo usuário.\n Nosso objetivo aqui é mostrar como funciona orientação a objetos em GO.\n Então vamos lá!\nConversor de temperatura - Parte 1 Definindo tipos de objeto Em Go, é possível que o programador defina seus próprios tipos de objeto.\nIsso é interessante pois melhora a legibilidade do programa e evita que erros bobos aconteçam, ao fazer com que um objeto somente aceite dados de um determinado tipo.\nEm Go, o tipo de objeto criado pelo programador deve herdar as propriedades de algum tipo primitivo, como int (inteiros), float64 (valor de ponto flutuante de 64 bits) string (cadeia literal de caracteres).\nOs tipos primitivos nada mais são do que formas \u0026ldquo;padrão\u0026rdquo; de se armazenar dados na memória de um computador para utilização.\nAo invés de utilizamos tipos primitivos, vamos criar alguns tipos de objeto para nosso conversor de temperatura:\n1 2 3 4 5 6 7 8 9  // PARTE 1 // // tipos de objetos do tipo float64  type fahrenheit float64 type celsius float64 type kelvin float64   Na parte 1 de nosso programa, criamos 3 tipos de objetos: celsius, farhenheit e kelvin. Esses tipos de objeto, só podem armazenar valores do tipo float64.\nDiscussão: Aqui há uma questão interessante a ser observada. Vejamos o trecho de código abaixo. Vamos supor que tenhamos:\ntype kelvin float64 var x kelvin = 10.0 var y float64 = 10.0 Se comparamos, por exemplo: if x == y o resultado será verdadeiro ou falso?\n A resposta é: falso!\n Isso se dá porque x é uma variável do tipo kelvin e y é uma variável do tipo float64. Tratam-se de tipos diferentes embora ambas variáveis possuam características do tipo primitivo float64.\nFazendo uma analogia, banana é um tipo de fruta diferente do tipo de fruta maçã, embora ambas sejam tipos de frutas.\nConversor de temperatura - Parte 2 Vamos voltar ao nosso programa exemplo. Já criamos nossos \u0026ldquo;tipos\u0026rdquo; de temperaturas. Agora vamos criar métodos para interagir com objetos desses tipos.\nA idéia aqui é a seguinte: quando criarmos um objeto do tipo kelvin, teremos um método para interagir com ele. O mesmo vale para os outros tipos de objeto. A interação desejada será fazer o cálculo (conversão) de um \u0026ldquo;objeto\u0026rdquo; temperatura.\nVamos lá:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  // PARTE 2 // // Criação de métodos para os tipos de objeto criados  // Cria método celsius para interagir com objetos do tipo fahrenheit  func (f fahrenheit) celsius() celsius { return celsius((f - 32) * 5 / 9) } // Cria método celsius para interagir com objetos do tipo kelvin  func (k kelvin) celsius() celsius { return celsius(k - 273.15) } // Cria método fahrenheit para interagir com objetos do tipo celsius  func (c celsius) fahrenheit() farenheit { return fahrenheit(c*9/5) + 32 } // Cria método celsius para interagir com objetos do tipo fahrenheit  func (f fahrenheit) celsius() celsius { return celsius((f - 32) * 5 / 9) } // Cria método celsius para interagir com objetos do tipo kelvin  func (k kelvin) celsius() celsius { return celsius(k - 273.15) } // Cria método fahrenheit para interagir com objetos do tipo celsius  func (c celsius) fahrenheit() farenheit { return fahrenheit(c*9/5) + 32 }   Anatomia de um método: Em Go, um método é parecido com uma função. Essa função pode ter um ou vários parâmetros.\nMas o importante aqui é que o método aceita somente um determinado TIPO de receptor como parâmetro.\nSe for passada à função algum argumento que não seja do TIPO de receptor determinado, ocorrerá erro de compilação.\nPara ilustrar nossa discussão, vejamos o trecho de um código abaixo, onde criamos 2 tipos de objeto (celsius e fahrenheit) e a seguir, criamos um método fahrenheit que somente pode receber objetos do tipo celsius (receiver).\nEsse método retornará como resultado (no caso a conversão de temperatura), um valor do tipo fahrenheit.\ntype celsius float64 type fahrenheit float64 func (c celsius) fahrenheit() farenheit { return fahrenheit(c*9/5) + 32 } Resumindo, criamos um método fahrenheit para objetos do tipo celsius.\nDiscussão: Aqui temos uma das principais diferenças entre a orientação a objetos em Go e outras linguagens:\n  Em algumas linguagens nós temos classes (que são modelos de objetos) e dentro das classes nós temos os métodos.\n  Quando criamos um objeto de uma determinada classe, aquele objeto já empacota o método para interagir com ele.\n  Em Go, criamos um tipo de objeto e associamos a ele um método, que vai interagir com aquele tipo. Quando o objeto do tipo determinado é criado, há um método para interagir com ele.\n A grande diferença é: em outras linguagens, você declara o método dentro da classe que está criando.\n  Em Go, o método é declarado fora da classe e se assemelha mais a uma declaração de função.\n Conversor de temperatura - Parte 3 Vamos à próxima parte de nosso conversor de temperatura.\nO que fizemos até agora:\n  Já declaramos tipos de objetos que queremos criar quando nosso programar for executado.\n  Também criamos métodos que irão interagir com os objetos baseados nos tipos de objeto que criamos.\n  Agora vamos criar nossos objetos propriamente ditos e vamos interagir com eles através dos seus métodos durante a execução do programa:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  // PARTE 3 // // ponto de ínicio para execução do programa.  func main() { // Cria objeto (Variável) do tipo kelvin e atribui valor 300  var k kelvin = 300.0 // cria objetos (variáveis) e deixa Go inferir de que tipo elas são no momento da atribuição de valor  c := k.celsius() f := fahrenheit(c) // imprime resultado com 2 casas decimais  fmt.Printf(\u0026#34;%.2f kelvin = %.2f celsius = %.2f fahrenheit\u0026#34;, k, c, f) }   Primeiro criamos um objeto de nome k (no caso nosso objeto é uma variável) do tipo kelvin. Esse objeto vai armazenar o valor 300.\nDepois criamos um objeto de nome c e atribuímos a ele o mesmo valor que guardamos em k, porém chamamos o método celsius, que nós criamos para objetos do tipo kelvin (lembrando que k é um objeto do tipo kelvin).\nLogo, Go irá inferir que c é do tipo celsius, pois já convertemos k para celsius, usando do método celsius.\nO mesmo raciocínio vale para o objeto f.\nPor fim, utilizamos a função printf do pacote fmt e realizamos a impressão do resultado, como argumentos os nossos 3 objetos criados: k, c, f.\nPara melhorar a legibilidade, ainda estamos mostrando os resultados com apenas 2 casas decimais.\nSe não fizéssemos isso, o resultado apresentado teria tantas casas decimais quanto são permitidas em váriáveis do tipo float64 para os valores armazenados.\nVamos ao programa completo:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  // início do programa definindo como pacote que será executado  package main // importação do pacote fmt (format), para realizarmos impressão  import \u0026#34;fmt\u0026#34; // Definição de 3 tipos de objetos do tipo float64  type fahrenheit float64 type celsius float64 type kelvin float64 // Definição de métodos p/ interagir com objetos dos tipos definidos  // método celsius para objetos do tipo fahrenheit func (f fahrenheit) celsius() celsius { return celsius((f - 32) * 5 / 9) } // metodo celsius para objetos do tipo kelvin func (k kelvin) celsius() celsius { return celsius(k - 273.15) } // metodo fahrenheit para objetos do tipo celsius func (c celsius) fahrenheit() farenheit { return fahrenheit(c*9/5) + 32 } // inicio do programa / ponto de entrada func main() { // cria objeto (Variável) do tipo kelvin e atribui valor 300 \tvar k kelvin = 300.0 // cria variáveis e deixa Go inferir o tipo de objeto durante a atribuição \tc := k.celsius() f := fahrenheit(c) // imprime resultado com 2 casas decimais \tfmt.Printf(\u0026#34;%.2f kelvin = %.2f celsius = %.2f fahrenheit\u0026#34;, k, c, f) }   O mesmo programa, porém sem comentários:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  package main import \u0026#34;fmt\u0026#34; type fahrenheit float64 type celsius float64 type kelvin float64 func (f fahrenheit) celsius() celsius { return celsius((f - 32) * 5 / 9) } func (k kelvin) celsius() celsius { return celsius(k - 273.15) } func (c celsius) fahrenheit() farenheit { return fahrenheit(c*9/5) + 32 } func main() { var k kelvin = 300.0 c := k.celsius() f := fahrenheit(c) fmt.Printf(\u0026#34;%.2f kelvin = %.2f celsius = %.2f fahrenheit\u0026#34;, k, c, f) }   Finalizando Nesse artigo exemplificamos o básico sobre orientação a objetos em Go, mostrando como definir tipos de objetos e como criar métodos para interagir com objetos desses tipos.\nOs objetos criados aqui são váriaveis, mas poderiam ser qualquer outro tipo de estrutura de armazenamento de dados disponível em Go.\nEm um outro momento, apresentaremos a criação de objetos mais complexos como structs, que se assemelham mais ao uso prático de classes de outras linguagens, porém com maior flexibilidade.\nEspero que tenham gostado e até a próxima.\n","description":"Entendendo POO em Go através de exemmplos - parte 1","id":9,"section":"posts","tags":["Go"],"title":"Orientação a Objetos em Go! - Métodos","uri":"https://alansantosmg.netlify.com/pt/posts/2020-04-11-oop1go/"},{"content":"Ubuntu 20.04 em ação:\n  Abandonando o Windows Quando o Windows 10 foi lançado, acabei migrando para o Linux. O sistema do tio Bill não estava maduro o suficiente. Era um remendo para tentar salvar a Microsoft do verdadeiro desastre que foi o Windows 8 com sua controversa interface gráfica.\nO Windows 10 é um bom produto, sensivelmente melhor que o seu antecessor. Porém, por ser um produto que \u0026ldquo;empurra\u0026rdquo; para o futuro a indústria de pcs, acaba sendo voltado para máquinas das últimas gerações.\nAo iniciá-lo em minha máquina pessoal, um core i7 de segunda geração, o processador entrava em trabalho intenso e a ventoinha de dissipação de calor funcionava ao máximo para o computador não fritar.\nEmbora a Microsoft tivesse \u0026ldquo;consertado\u0026rdquo; a interface do Windows, no início ele ainda era um produto de transição e como tal, vinha reacheado de arestas a aparar.\nSomente agora, em 2020, a Microsoft parece ter corrigido a maioria dos bugs mais sérios. A versão do Windows 10 de fevereiro último, está incrivelmente rápida, como seria de se esperar para um produto pago.\nSomente Linux Veio tarde\u0026hellip;\nEu já havia ido para o Linux. Primeiro fui para o Linux Debian, depois Linux Mint, MX-Linux e outros, até estacionar no Xubuntu 19.04, que leva esse nome por utilizar uma interface gráfica leve e bastante estável, chamada XFCE.\nPara torná-lo ainda mais rápido, substitui o gerenciador de janelas padrão do XFCE pelo I3wm (no Linux, a interface gráfica e o gestor de janelas são componentes independentes/opcionais ao sistema operacional, portanto intercambiáveis).\nDada à estabilidade e leveza da interface XFCE, aliada à usabilidade \u0026ldquo;matadora\u0026rdquo; do I3, essa combinação resultava em um sistema sólido como uma rocha e extremamente veloz, mesmo se comparado à outras distribuições Linux.\nSe por um lado ganhava em produtividade, por outro, acabava obtendo uma experiência de usuário um pouco mais empobrecida, ao abrir mão da elegância, beleza e consistência entre a interface do sistema operacional e as diversas aplicações executadas.\nEle chegou! Ubuntu 20.04 Agora não é mais preciso abrir mão dessas duas coisas. A Canonical estará entregando no próximo dia 23 de abril a versão 20.04 do Linux Ubuntu, que entrou em estágio beta no último dia 2.\nMuito melhor que o anterior Cheguei a experimentar a versão anterior, Ubuntu 19.04, mas não quis ficar nem 4 horas com a mesma instalada, por consumir muitos recursos da máquina e ser \u0026ldquo;pesada\u0026rdquo; demais.\nO Ubuntu utiliza como interface gráfica o Gnome, que na versão 19.04 do Ubuntu, era extremamente lento para máquinas um pouco mais antigas. Em minha máquina, seu desempenho acabava se assemelhando ao do Windows 10 quando do seu lançamento. Isso não é mais realidade.\nPromessa cumprida Nessa versão (20.04), a Canonical cumpriu o prometido e deu uma atenção especial ao Gnome, corrigindo muitos bugs que tornavam a interface lenta.\nNão apenas isso. O Gnome nessa versão 3.36 está com uma interface extremamente consistente. É lindo! Mais do que isso: super veloz (responsivo) e com consumo de CPu finalmente domado.\nEstou testando desde o dia 2 e posso dizer com segurança que não devo voltar para o Xubuntu. Embora o Gnome não seja 100% um tiling manager como o I3, ele faz um ótimo trabalho de gestão de desktops virtuais e de redimensionamento de janelas.\nNovidades O Ubuntu 20.04, além do desempenho aprimorado, traz outras melhorias como um tema escuro super bacana (que não depende mais da instalação do Gnome Tweak para ser configurado), o sistema de arquivos ZFS (que não é o padrão, mas pode ser utilizado na partição raiz) e opção de criação de VPN integrada.\nPara o usuário final o que \u0026ldquo;aparece\u0026rdquo; mesmo é a experiência com o Gnome. Outras interfaces gráficas para Linux funcionam bem. Várias delas tem bom desempenho, mas maioria como o XFCE, o Mate, Cinnamon entre outras, tem uma premissa baseada no \u0026ldquo;Windows\u0026rdquo; (leia-se barra de tarefas e menu iniciar clássico).\nO Gnome tem uma premissa diferente das interfaces clássicas, sendo bem mais moderno e fornecendo uma experiência de usuário agradável, organizada e com excelente usabilidade.\nA Canonical privilegiou nesta versão (20.04), a melhora de desempenho do Gnome para máquinas mais modernas. Na próxima (20.10) que será lançada em Outubro, focará em melhorias para computadores mais modestos.\nHora de mudar? Se você não gosta do Windows 10 ou acha que o desempenho dele ainda é ruim, (embora sejamos justos, as correções lançadas em 2020, melhoraram muito o sistema) e está aberto a mudanças, talvez seja a hora de pensar em um sistema de código livre, que proporcione uma experiência de uso mais moderna e interessante e com melhor desempenho em hardwares não tão novos.\nLançamento oficial No dia 23, a Canonnical deve fazer o lançamento da versão final LTS (suporte extendido de 5 anos) e certamente teremos um Ubuntu que vai fazer estória como uma das melhores versões já lançadas.\nScreenshots Clique nas imagens para ver em alta resolução.\nTela principal: Ubuntu 20.04   Gerenciador de arquivos Nautilus: Ubuntu 20.04   Gerenciador de arquivos Nautilus: Ubuntu 20.04   Menu Principal: Ubuntu 20.04   Notificações e calendário: Ubuntu 20.04   Loja de aplicativos: Ubuntu 20.04   Aplicativos - Não existe menu iniciar: Ubuntu 20.04   Alternando aplicações e múltiplas áreas de trabalho: Ubuntu 20.04   Busca do sistema: Ubuntu 20.04   Temas - light:: Ubuntu 20.04   Temas - dark: Ubuntu 20.04   Janela de terminal rodando Vim Editor:: Ubuntu 20.04   Multiplas janelas de terminal:: Ubuntu 20.04   Monitor do sistema:: Ubuntu 20.04   Libre Office 6.4:: Ubuntu 20.04   Utilitários do sistema:: Ubuntu 20.04   Player:: Ubuntu 20.04   ","description":"O verdadeiro substituto para Windows 10","id":10,"section":"posts","tags":["Go"],"title":"Ubuntu 20.04 LTS - Experiência de desktop superior","uri":"https://alansantosmg.netlify.com/pt/posts/2020-04-09-ubuntu2004/"},{"content":"Em Golang, assim como no Java, Javascript e outras linguagens de programação, é possivel passar em cascata por casos dentro de um switch (falltrough). Porém, em Go isso deve ser feito de forma explícita (segura), através da declaração da keyword falltrough.\nPara melhor entendimento, vamos comparar a técnica usando primeiro Javascript e depois Go.\n1 2 3 4 5 6 7 8 9 10 11 12  const protecao = \u0026#39;mascara de pano\u0026#39;; switch (protecao) { case \u0026#39;mascara cirurgica\u0026#39;: console.log(\u0026#39;Material de proteção para profissionais de saude\u0026#39;); break; case \u0026#39;mascara de pano\u0026#39;: case \u0026#39;alcool gel\u0026#39;: console.log(\u0026#39;Mascara de pano e alcool gel são materiais de proteção pessoal.\u0026#39;); break; default: console.log(protecao + \u0026#39; não é material de proteção contra Covid.\u0026#39;); }   Resultado:\nMascara de pano e alcool gel são materiais de proteção pessoal. 1 2 3 4 5 6 7 8 9 10 11 12 13  switch protecao := \u0026#34;mascara de pano\u0026#34; { case \u0026#34;mascara cirurgica\u0026#34;: fmt.Println(\u0026#34;Material de proteção para profissionais de saude\u0026#34;) break case \u0026#34;mascara de pano\u0026#34;: fmt.Println(\u0026#34;Mascara de pano - material de proteção pessoal.\u0026#34;) falltrough case \u0026#34;alcool gel\u0026#34;: fmt.Println(\u0026#34;Alcool gel - material de proteção pessoal.\u0026#34;) break default: fmt.Printf(\u0026#34;%v não é material de proteção contra Covid.\\n\u0026#34;, protecao) }   Resultado:\nMascara de pano - material de proteção pessoal.\nAlcool gel - material de proteção pessoal. É interessante notar que em GO! pelo fato do falltrough ser declarado explicitamente, é possível executar as declarações internas de cada um dos casos em cascata. Essa diferença dá um pouco mais de flexibilidade no uso do switch.\n","description":"Executando casos em cascata dentro de um switch em Golang","id":11,"section":"posts","tags":["Go"],"title":"Fallthrough em Golang","uri":"https://alansantosmg.netlify.com/pt/posts/2020-04-04-fallthrough/"},{"content":"No post de hoje eu vou contar sobre algumas peculiaridades sobre Arrays e Slices na linguagem de programação GO.\nEu não vou explicar o que são arrays e slices, pois estou partindo do pressuposto que se você está lendo este artigo, deve ter um mínimo de conhecimento sobre linguagens de programação. Também não vou fazer diagramas, pois o assunto é óbvio demais e não carece de tal recurso.\nArrays Tamanho dos arrays  Na linguagem GO, um array ao ser declarado, precisa ter um tamanho fixo. Uma vez declarado um array, não existe uma forma de mudar o seu tamanho original. Se precisar de um array maior, o que pode ser feito é definir um novo array com mais posições. Depois, copiar para o novo array os dados do array original.  Arrays e funções Na liguagem GO, quando um array é passado como parâmetro de uma função, o que o programador na verdade está fazendo é realizando uma cópia do array que foi passado. Isso tem implicações:\n qualquer mudança feita no array passado como parâmetro, será perdida quando a função terminar/deixar de existir. o array original não refletirá qualquer alteração que tiver sido realizada dentro do escopo da função. passar o array como parâmetro de uma função pode causar lentidão na execução do programa.  Imagine que se você tiver um array muito grande, ao passá-lo como parâmetro de função, a cópia demorará o tempo proporcional ao seu tamanho.  Criando array 1 2 3 4 5  // sempre tem tamanho fixo  myarray := [4]int{0,1,2,3}   Slices Tamanho dos slices  Um Slice é uma estrutura parecida com um array em GO. Embora seja parecido com um array, um slice é mais flexível, pois não precisa ter um tamanho fixo. Sendo estruturas de tamanho variável, slices em GO, acabam fazendo o papel que arrays tem em outras linguagens. O slice além de tamanho, também tem capacidade. Quando um slice esgota seu tamanho (todas as posições são preenchidas), Go simplesmente dobra a capacidade do Slice. Isso pode ser problemático para Slices grandes.  Se o programador tiver por exemplo, um slice com 5 milhões de posições e precisar preencher mais uma posição, a capacidade do Slice dobrará para 10 milhões de posições.  Slices e funções Na linguagem Go, ao passar um Slice como parâmetro de uma função, na verdade o programador está passando uma referência.\n qualquer mudança ocorrida no slice como parâmetro dentro de uma função, será refletida no slice referenciado. passar um slice como parâmetro é algo rápido, pois o programador está criando apenas um ponteiro e não uma cópia do slice original.  Criando um slice 1 2 3 4 5 6 7 8 9  // Slice c/ elementos mas sem tamanho fixo  aSliceliteral := []int{1,2,3,4} // Slice s/ elementos mas de tamanho fixo  aIntegerSlice := make([]int, 20)   Cópia entre arrays e slices De array para slice  Ao copiar um array para um slice, é preciso convertê-lo primeiro para slice com a notação [:]. Se isso não for feito, o compilador gerará um erro. Ao se copiar um array para um slice, o slice será reduzido ou aumentado para o tamanho do array e seus elementos serão preservados!  De slice para array  Ao se copiar um slice para um array, o array manterá seu tamanho. Somente serão copiados os itens que cabem dentro do array e os elementos existentes serão sobrescritos.  Finalizando Bem pessoal, é isso aí. Go é legal, mas tem que tomar cuidado com pequenos detalhes. Logo mais, voltarei com outras peculiaridades dessa interessante e poderosa linguagem.\n","description":"Neste artigo, falarei sobre algumas peculiaridades interessantes e cuidados que um programador deve ter ao utilizar arrays e slices na liguagem Go!","id":12,"section":"posts","tags":["Go"],"title":"O que ninguém te conta sobre Arrays e Slices na linguagem Go","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-26-array-e-slices/"},{"content":"Novas formas de seleção O advento da pandemia por Corona Vírus, definitivamente está mudando a forma como as empresas estão selecionando candidatos para suas vagas. Embora eu esteja atuando com consultoria em governança de TI e gestão de processos, não deixo avaliar oportunidades interessantes que surgem. Nas últimas semanas, acabei sendo convidado a participar 2 processos seletivos em empresas.\nEsses processos estão sendo bem diferentes de todos que participei em qualquer outro momento de minha carreira profissional. Parece que a necessidade tem levado os RH\u0026rsquo;s a adotarem etapas de seleção que até poucas semanas atrás, não eram muito usuais, embora não sejam necessariamente uma \u0026ldquo;novidade\u0026rdquo; de mercado.\n O que há de diferente agora nos processos seletivos?\n  No primeiro processo, solicitaram uma video-apresentação de 4 minutos, falando a meu respeito e contando sobre um case de sucesso de minha vida profissional. Solicitaram também, uma apresentação em 4 slides em Powerpoint, detalhando esse case. Tudo deveria ser \u0026ldquo;enviado por Whatsapp\u0026rdquo;. No segundo processo, pediram uma video-apresentação de 10 minutos contando a meu respeito, falando sobre minha trajetória profissional e destacando como poderia ser útil para posição oferecida. Também pediram para \u0026ldquo;enviar tudo por Whatsapp\u0026rdquo;.  A princípio, nos dois casos, não pediram nada demais. Qualquer um pode pegar um celular, olhar para a câmera, começar a gravar e logo a seguir \u0026ldquo;enviar tudo por Whatsapp\u0026rdquo;.\n Será mesmo tão fácil fazer video apresentações e \u0026ldquo;enviar tudo por Whatsapp\u0026rdquo;?\n Problemas comuns Uma coisa é você mandar um recado para o namorado ou namorada, um oi para o filho ou fazer uma palhaçada para um amigo numa mensagem de video. Outra, é fazer uma apresentação profissional.\nVou listar abaixo alguns problemas com os quais me deparei e certamente, você que está participando de algum processo seletivo, poderá passar também quando for fazer uma video apresentação.\nTempo descontrolado Cinco minutos de video parece pouco, mas não é! Nesse tempo o espaço para narrativa é longo, afinal você estará falando sozinho, sem interrupções.\nÉ muito fácil perder o controle do tempo: ou você termina antes por falta de assunto e desperdiça preciosos minutos em que poderia se vender, ou extrapola o tempo, fazendo o recrutador perder o interesse enquanto assiste.\nFala embolada Esse é o erro mais irritante que alguém acaba invariavelmente cometendo quando está fazendo uma apresentação em video. O sujeito começa a falar tudo bonitinho e daí, 1 ou 2 minutos depois, embola uma palavra. Pronto: a concentração vai embora e o video desgringola.\nTravamento da boca Outro erro super comum: sujeito começa a falar e lá pelo segundo, terceiro minuto, a voz simplesmente desaparece ele trava. A garganta fica arranhando e passa ser preciso uns minutos para ir à cozinha se recompor.\nEsquecimento Você está com tudo preparado e diz: agora vai! No meio da fala, bate aquele branco. Você fica 1 ou 2 segundos completamente mudo. Tempo mais do que suficiente para fazer a apresentação parecer artificial ou para passar uma idéia de insegurança ou mesmo timidez. Isso se não ficar travado até pressionar o stop da câmera.\nQuestões ambientais No momento daquela frase de efeito, passa um ônibus na porta de sua casa. O recrutador diz que você está com olheiras enormes no video, mas você dormiu bem a noite toda.\nCaprichando! Tenha um roteiro Ter um roteiro auxilia em muitas coisas. Seu benefício imediato é ajudar a controlar o tempo ao estabelecer um limite dentro do qual vai ocorrer sua narrativa. O roteiro serve ainda para ajudar a manter o foco naquilo que é mais importante: O que o recrutador pediu para contar.\nEnsaie Aqui nós temos uma dupla dinâmica. O roteiro sozinho não faz milagres. Na verdade, ele não serve para quase nada se você não ensaiar.\nDe roteiro na mão, ensaie, ensaie, ensaie. Isso vai ajudar a adquirir segurança e ganhar fluidez. Com o tempo seu video se parecerá menos com o de um candidato em propaganda de eleição e mais como o de um youtuber descolado.\nEnquanto ensaia, use o roteiro a seu favor:\n substitua palavras difíceis por outras mais simples para evitar o famoso travamento de boca.  Numa das duas apresentações que realizei, eu estava usando a palavra \u0026ldquo;desburocratizar\u0026rdquo;. Exatamente nesse ponto do roteiro, embolei várias vezes a fala. Quando procurava me concentrar o suficiente para pronunciar des-bu-ro-cra-ti-zar, acabava esquecendo o restante e literalmente travava em frente à câmera.\nDecore  Decorar até que ponto?\n Não basta apenas ensaiar, é preciso decorar a fala do roteiro até soar completamente natural. Não pode ter travamento de boca. Não pode ter pausas grandes entre as falas. Não pode começar a dizer uma frase e depois corrigí-la. Todas essas coisas fazem o video parecer pouco profissional.\nJamais fique lendo ou mesmo espiando o roteiro em algum dispositivo próximo. É feio ficar desviando o olhar da câmera a todo momento.  Se precisar ler um trecho de algum documento, segure o papel diante da câmera, de modo que o expectador possa ver que você vai ler. Daí diga algo como: \u0026ldquo;eu agora vou ler para vocês, um trecho do documento xyz, etc\u0026rdquo;.\nSe quer fazer um ótimo video, decore até ficar automático. Faça isso até ter a desenvoltura de um professor, que é capaz de fazer uma longa explanação de forma natural, sem ficar titubeando.\nResumindo:\n Escreva um roteiro com suas falas. Depure o roteiro lendo-o em voz alta. Ensaie, decorando até ficar natural.   Cuide do ambiente Iluminaçao Um video com má iluminação pode fazer o interlocutor parecer que tem olheiras enormes ou ainda que está em um ambiente não muito limpo. Escolha um local com paredes claras e iluminado por igual. A iluminação distribuída garante que uma parte do rosto não fique muito mais clara do que outra.\nCuide da quantidade de luz. Muita luz faz a imagem ficar \u0026ldquo;estourada\u0026rdquo;. Pouca luz deixa tudo mais feio, pobre.\nNunca se esqueça: Em materia de imagem, iluminação é tudo!  Local Escolher bem o ambiente onde a câmera irá filmar é outra questão importante. Verifique o fundo! Não é uma boa gravar em locais onde estão passando outras pessoas. Não é legal ter outros objetos atrás, como portas, janelas ou coisas que possam desviar a atenção. É uma apresentação profissional e não um video sobre férias ou cotidiano.\nHorário da gravação Pense bem: talvez seja melhor gravar à noite. Não, não é porque é mais romântico. É pelo fato de que à noite, o movimento de pessoas na rua é menor, o número de veículos em circulação é menor, o número de pessoas entrando e saindo dos prédios é menor. É menos cachorro latindo, menos máquinas funcionando. É o momento de descanso e por isso a quantidade de ruídos que podem atrapalhar sua gravação, provavelmente será menor.\nObjetos Evite ter muitos objetos próximos para não desviar a atenção. Pode ter objeto? Pode! É possivel posicionar à câmera frente a uma mesa ou filmar uma estante ao fundo. Um enfeite discreto sob a mesa como um mascote, pode até ser aceitável em algumas situações. Mas lembre-se:\n numa gravação de video, tudo que aparece na frente da câmera deve ter uma função.\n Por isso, privilegie objetos que \u0026ldquo;vendam\u0026rdquo; características de sua personalidade que possam ser de interesse para a empresa.\n Exemplo 1: para uma vaga para gestor de conteúdos, um bonequinho de uma série pode mostrar que você se interessa por leitura, por mídia. Exemplo 2: para uma vaga numa empresa de artigos esportivos, um objeto com escudo do time pode ajudar a contar um pouco sobre sua familiaridade com aquele segmento.  Agora imagine inverter os objetos entre os dois exemplos citados. Nada a ver, né? NÉ? NÉÉÉ?  Maquiagem Algumas pessoas tem o rosto mais oleoso e isso às vezes fica muito aparente em video. Manter o rosto seco com alguma maquiagem pode ajudar.\nRefrescando Á medida em que for treinando, a fala vai ficando mais afiada. Porém, no começo é bom ter um copo dágua por perto para lubrificar a boca e a garganta, ajudando as palavras a sairem de forma mais macia.\nPensando melhor, tenha generoso jarro de água por perto - mas longe do enquadramento da câmera. Se pretende mesmo decorar o seu texto e fazer um video de primeira qualidade, você precisará dele.\nTecnologia A maioria das pessoas acha que para fazer um bom video, basta disposição e um celular de última geração. Isso é apenas metade da estória. Seu video precisa chegar ao seu expectador - no caso, o RH da instituição que está promovendo o processo seletivo.\n Muita gente acha que não, mas é justamente na hora de lidar com a tecnologia que as coisas tendem a se complicar de verdade.\n Tamanho do arquivo Sabe aquele video de 4 minutos filmado no celular em Ful lHD? Pois é\u0026hellip; esse video pode atingir nada menos que tamanhos em torno de 2 ou 3 gigabytes, dependendo da câmera, formato de arquivo e aparelho utilizados.\nTente enviar para alguém um video nesse tamanho. Você pode até conseguir, mas certamente poderá passar por minutos e até horas de frustração ou desespero.\nSe você fez tudo certo da primeira vez, mas realizou a gravação com seu celular, certamente seu video terá ficado enorme, pois os celulares vem configurados de fábrica para oferecer a imagem com a melhor qualidade que eles conseguem entregar.\nFiz um video de 4 minutos em meu celular Xiaomi e o tamanho do arquivo ficou na casa de meros 2GB. Por padrão, meu celular estava configurado para videos em Full HD 1080p (pixel) e 30fps (frames por segundo).\nAo rever as configurações do celular, constatei que poderia reduzir um pouco a qualidade de video sem ter perdas significativas. Baixei a resolução para 480p, 30fps e fiz um novo video de 4 minutos. O resultado foi surpreendente: o tamanho do arquivo caiu de 2 gigas para 65 megas.\nTenho certeza que se você está lendo este texto, certamente é para poupar tempo, evitando tipos de erros já conhecidos. Então, antes de gravar para valer, não deixe de testar diferentes resoluções de video. Opte sempre por uma imagem aceitável com menor tamanho de arquivo possível.\nTip: Ter uma boa iluminação e um ambiente limpo e organizado são muito importantes, pois de certa forma, servem para compensar a perda de qualidade na imagem.  Como enviar O problema de um arquivo grande é que pode levar tempo para tratá-lo - convertê-lo para um formato mais eficiente.\nPior do que isso: pode ser bem difícil entregar um arquivo grande ao recrutador. Processos seletivos tem prazos e ninguém quer perder um prazo apenas por não conseguir enviar um arquivo gigante ou por demorar demais a convertê-lo para um tamanho menor. Se você nadou, penou para fazer seu video, não morra ao chegar à praia!\nEnvio pelo Whatsapp Com a pandemia, muitos recrutadores estão trabalhando de casa e utilizam o Whatsapp como ferramenta de comunicação com seus candidatos.\nTente mandar um video de 4 minutos pelo ZAP e veja o que acontecerá:\nO whatsapp não enviará o arquivo inteiro imediatamente. Ao invés disso:\n Primeiro ele irá subir o arquivo para o servidor. Depois listará seu arquivo frame a frame e permitirá somente que você envie somente 30 segundos de gravação de cada vez! Se quiser mandar mais, você terá que repetir o processo de modo a fatiar o seu video em diversas mensagens com apenas miseráveis 30 segundos, cada.   Imagine a cara de decepção de um recrutador, ao receber 8 mensagens em série para um video de apenas 4 minutos.\n Soluções para envio Conversão e compactação Existem 2 coisas que podem ser feitas para tornar viável o envio de video apresentações pelo Whatsapp.\n A primeira coisa é converter o arquivo salvo para um formato mais eficiente (tamanho menor). A segunda coisa é compactar o arquivo convertido para tentar deixá-lo ainda menor e de quebra, empacotá-lo em outro formato de arquivo, como zip, rar, 7z, permitindo que ele seja enviado de uma única vez como documento pelo Whatsapp.  Utilitários indispensáveis Vou indicar 2 aplicativos para celulares Android, que funcionaram muito bem tanto para conversão, quanto para compactação. Durante minha necessidade, testei vários utilitários. Esses dois que selecionei foram os resolveram meu problema, tanto em termos de entrega do prometido, quanto em facilidade de uso.\nVidCompact Esse aplicativo para Android retira frames desnecessários de videos e faz um ótimo trabalho de compressão, diminuindo o tamanho dos arquivos, através da conversão para formatos de arquivo mais populares e eficientes como mp4 e mp3.\nO VidCompact pode ser utilizado em modo \u0026ldquo;trial\u0026rdquo; por 3 dias. Portanto, deixe para instalar quando realmente precisar ou então opte pela versão paga que é bem barata. Se você está procurando emprego, creio que vale a pena ter a versão paga.\n Ninguém quer ser pego com as calças na mão, não é mesmo?\n ZipManager Esse aplicativo para Android funciona exatamente como o Winzip ou 7Zip que costumam ser instalados em Pc\u0026rsquo;s. Ele pega o arquivo, compacta e salva no formato .zip\nMesmo que seu video convertido não passe por uma taxa de compactação alta ao usar este aplicativo, ainda sim é uma vantagem utilizá-lo. Ao salvar o arquivo de video em um .zip, é possível enviá-lo de uma só vez via whatsapp como documento, contornando a inconveniente funcionalidade de envio de videos do app.\nCertamente, existem aplicativos semelhantes para IOs. O importante aqui é entender o espírito da coisa.\nFinalizando Bem, espero que tenha gostado do artigo. Se puder, deixe seus comentários ao final. Torço para que este texto possa ajudar candidatos e recrutadores nessa nova realidade de relações à distância que se impõe diante de todos nós. Um abraço a todos e boa sorte.\n","description":"Os RHs estão mudando os processos de recrutamento com a pandemia de COVID. Você sabe fazer uma boa video apresentação?","id":13,"section":"posts","tags":["Covid"],"title":"Video apresentações para processos seletivos","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-25-video-apresentacao/"},{"content":"Introdução Olá pessoal. Hoje vou dar mais uma contribuição para ajudar a superarmos os tempos difíceis que vivemos. Dentro da minha área (TI), existem ínumeras ferramentas tanto livres como proprietárias, que podem ser utilizadas como soluções para ajudar empresas e pessoas a desenvolverem suas atividades.\nNo último post eu falei sobre uma ferramenta free para videoconfêrencia, O Zoom, que pode ser utilizado de forma grátis para aulas e reuniões online.\nHoje vou falar de uma ferramenta de software livre para criação, edição e transmissão de videos com aspecto mais \u0026ldquo;profissional\u0026rdquo;, para internet. Essa ferramenta é o Obs Studio - Open Broadcaster Software.\nObs Studio O Obs é uma aplicação de video criada pela comunidade de software livre. Hoje, ele é patrocinado pelo Facebook, pela Nvidia (fabricante de placas de video), pelo Twitch e claro, também por nós, meros mortais. Se você gostar, pode e recomendo que faça uma doação para o projeto.\nRequisitos Para usar o Obs Studio, você vai precisar de:\n Um computador ou notebook com uma placa de video decente Sistema operacional Windows, Linux ou MacOS. Uma câmera que pode ser a do computador ou uma externa de melhor qualidade (como ouma GoPro). Um microfone, que pode ser o do computador, mas recomendo que seja um externo, para obter som com qualidade profissional. Uma conexão de internet com velocidade razoável de UPLOAD. Se tiver um link comercial dedicado, melhor ainda!  A questão do som é muito importante, pois geralmente os microfones embutidos de pc captam o ruído da própria máquina e em muitos casos também captam o áudio com um horrível eco do ambiente. Microfones externos possuem recursos para redução de ruídos e ecos, tornando a qualidade do som, infinitamente melhor.  Funcionalidades   O Obs é capaz de fazer a criação de videos com cortes, transições, inclusão e até sobreposição de diversas mídias diferentes: como arquivos de imagens, videos capturados de câmeras, captura de tela em tempo real, arquivos de áudio, etc.\n  O Obs também é capaz de realizar a transmissão de video em tempo real (as famosas lives) para diversos serviços na internet, como Facebook, youtube, Twich, entre outros.\n  É possível por exemplo, gravar ou transmitir em tempo real, um video mostrando a própria tela do computador sendo capturada, com uma janelinha sobreposta em um canto, mostrando uma câmera filmando o apresentador e no outro canto, uma janelinha mostrando um arquivo de imagem.  Antes de usar Para se obter apresentações com boa performance de transmissão e qualidade de video profissional, é preciso configurar com cuidado o Obs Studio.\nAprenda Obs Para não ter que ficar reinventando a roda, vou listar aqui alguns video treinamentos online em português, (os melhores que já encontrei) mostrando o passo-a-passo como configurar e usar o Obs Studio para Lives e gravações. Recomendo muitíssimo assistir esses videos, para poder tirar muito valor dessa ferramenta, sem quebrar a cabeça.\n Se gostar, não deixe de dar um jóinha para os autores. Eles tiveram um trabalho danado e merecem todo o crédito!\n Instalação Video que ensina como baixar e instalar o Obs Studio para Windows e que fala de detalhes importantes das opções de configuração para se obter melhores videos e melhores transmissões.\nDetalhes de configuração do Obs Studio\nOperação básica Depois de instalar o Obs Studio, recomendo assistir esse video logo após a instalação. Ele ensina o básico do básico e vai ajudar, além de conhecer a interface e operar os recursos básicos da ferramenta, a entender como determinadas configurações irão afetar o comportamento do software.\nPrimeiros passos com Obs Studio - Lives profissionais\nConfiguração Geral Neste video, do canal Dio Linux, você obterá um aulão de 1 hora sobre sobre configuração e uso do Obs Studio para Lives. Super recomendo!\nMega tutorial de 1 hora sobre configuração e uso do Obs Studio para lives\nYoutube Este video, irá ensinar a configurar o Obs Studio para fazer lives no YOUTUBE, inclusive explicando as parametrizações que devem ser feitas lá no canal onde se dará a transmissão.\nConfigurando Obs Studio para Lives no youtube\nFacebook Este video, mostrará como configurar e usar o Obs Studio para realizar lives no FACEBOOk:\nComo fazer lives no Facebook como Obs Studio\nOtimização Este video ensina como otimizar o Obs Studio para live streaming, evitando congelamentos de tela, lentidão da transmissão, entre outros.\nOtimizando o Obs Studio para Lives\nDicas para Webinars Este video ensina a realizar uma aprensentação profissional (som, iluminação, etc) de webinar.\nComo fazer Webinars com Obs Studio - Dicas\nDispositivos Este video ensina como usar as câmeras HD e Full HD de celulares Android, que muitas vezes são bem melhores do que as câmeras de notebooks e pcs, em conjunto com o Obs Studio. Se você não quer investir numa câmera GoPro e mesmo assim quer gravações de alta qualidade, vale a pena assistir.\nComo usar câmera do celular Android com Obs Studio\nResolução de problemas Video de troubleshooting que mostra como resolver um problema muito comum no Obs Studio. Esse problema é muito comum, já que o Obs studio pode ser instalado em um número enorme de dispositivos e sistemas e nem sempre ele vai funcionar adequadamente.\nComo resolver problema de tela preta no OBS\nFinalizando Bem pessoal, por enquanto é isso. Espero que esse video sirva como um \u0026ldquo;guia inicial\u0026rdquo; para empresas e pessoas poderem se virar nesse período de isolamento em que o trabalho remoto deixou de ser uma mera opção para se tornar uma realidade para a maior parte de nós.\nSe você gostou do post, deixe aí abaixo seus comentários, sugestões e etc. Se encontrou algum erro, também não deixe de entrar em contato, pois assim vou ajustando, em benefício de todos. Você pode deixar também seus comentários lá no linkedin e se acha que esse conteúdo pode ajudar mais alguém, compartilhe! A união faz a força!\n","description":"Em tempos de Covid, muitas empresas precisarão contar com recursos de gravação de videos e transmissão de lives pela Internet. Com dinheiro escasso, nada como um software livre fácil instalar, configurar, que pode ser usado em Windows, Linux e Mac, para gravações de video e realização de lives com qualidade profissional.","id":14,"section":"posts","tags":["Covid"],"title":"Software para transmissão de lives (free)","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-24-obs-studio/"},{"content":"O que é o Zoom? O Zoom é uma ferramenta de video conferências, similar ao Skype. Ela se tornou uma alternativa extremamente popular pela sua facilidade de uso e por oferecer a capacidade conferências em grupo para um número elevado de usuários, mesmo no plano grátis.\nO que o Zoom pode fazer por mim? O Zoom possui um plano grátis que oferece como funcionalidades principais:\n Conferências com até 100 participantes. Reuniões ilimitadas de 1 para 1. Tempo de até 40 minutos para reuniões em grupo. Número ilimitado de reuniões. Suporte online Video e voz HD Sala personalizada. Você pode criar e manter sua propria sala (que terá um número identificador) e agendar reuniões nela. Compartilhamento de tela - Recurso para passar apresentações Anotações em tela compartilhada Agendamento de reuniões Possibilidade de gravação da reunião na maquina de quem ministra Quadro branco Chat em grupo para discussões.  Se for pouco para você, o Zoom também oferece planos pagos, que incluem muitas outras capacidades.\nO que preciso para usar o Zoom? Para usar o Zoom, o palestrante precisa de 3 coisas:\n Ter um notebook, pc, celular ou tablet com uma câmera. Ter uma conta no Zoom Conexão com internet razoável  Como uso o Zoom? Para usar o Zoom, primeiro é preciso criar uma conta no serviço. Depois, acessá-lo, criar um agendamento de reunião online e enviar o convite para os participantes. Na hora da reunião, acessar novamente e ingressar na reunião. Durante a reunião é possível compartilhar a tela e interagir com os participantes.\n1. Criando uma conta no Zoom Para criar sua conta no Zoom, siga os passos abaixo:\n1.1 Acesse o site da Zoom: clicando aqui!\n1.2 Na tela principal, preencha seu email, clique no botão laranja.\n1.3 Na janela pop-up que será aberta clique no botão confirmar.\n1.4 Você receberá um e-mail. Neste e-mail deverá clicar no botão Activate account.\n1.5 Ao clicar no botão, você será redirecionado novamente para o Site da zoom para preencher um cadastro.\n1.6 Preencha os dados. A senha deve ter no mínimo 8 caracteres, c/ pelo menos 1 número e 1 letra maiúscula.\n1.7 Clique no botão continue para finalizar a criação de sua conta.\nPronto! Sua conta está criada. Nesse momento você será direcionado para dentro do site do Zoom. Se quiser voltar mais tarde, basta acessar o endereço e logar novamente com seu email e senha.\n2. Atualizando o perfil no Zoom Após criar a sua conta é necessário atualizar seu perfil. Assim, você poderá ser \u0026ldquo;reconhecido pelos participantes\u0026rdquo;.\n2.1 Ao entrar você já deve ir inicialmente para tela de perfil. Se isso não acontecer, clique onde deveria existir uma foto no canto superior direito da tela ou em perfil ou ainda profile no menu lateral esquerdo da tela.\n2.2 Onde aparece a foto, clique em change ou alterar e faça o upload de uma foto sua. De preferência, use uma foto de rosto, tipo essas 3x4, de modo que os participantes possam facilmente identificá-lo.\n2.3 Em language clique em edit e altere para português. Assim fica tudo mais fácil, né?\n2.4 Edite as opções de data colocando o fuso horário correto, caso o seu seja diferente do apresentado. Marque a caixa de horas de formato de 24 horas. O Zoom não oferece opção de data no formato dd/mm/yy. Contente-se com mm/dd/yy!\n2.5 Se você usa Office 365, correio Exchange ou utiliza os serviços do Google, conecte seu calendário no Zoom. Essa funcionalidade é interessante, pois posteriormente ao criar/agendar uma reunião o Zoom pode criar o evento dentro do seu aplicativo de agenda. No seu aplicativo de agenda, você pode editar o evento para incluir os participantes de sua lista de contatos.\nNão se preocupe, caso os participantes não façam parte de sua lista de contatos, ainda será possível criar um e-mail manualmente com o convite para envio aos interessados.\n3. Agendando uma reunião online Agora que o perfil está atualizado, vamos agendar uma reunião. Assim, será possível avisar com atencedência aos participantes.\n3.1 Clique em Agendar reunião\n3.2 Preencha dos dados da reunião:\nTópico e descrição - Digite um título e uma descrição para sua reunião.\nHorário - Lembre-se que está no formato é mm/dd/yy.\nDuração - Se estiver no plano grátis deixe como está.\nFuso horário - Deixe como está, se já tiver atualizado no perfil.\nReunião recorrente - Marque se for fazer outras e defina a periodicidade\nID da reunião\nGerar automaticamente - Escolha essa se for uma reunião muito pontual.\nID pessoal da reunião - Escolha essa se for fazer mais reuniões. O Id pessoal é como se fosse uma sala reservada para reuniões.\nSenha - Marque se quiser que só ingresse na reunião quem tiver a senha. É uma camada a mais de segurança. Quem não souber o ID da reunião ou não tiver o link para ela, não ingressará. Mas se o link for repassado, a pessoa que receber pode ingressar. Recomendo então marcar essa opção a menos que seja uma reunião aberta, onde qualquer um pode ingressar.\nVideo - O que habilitar varia conforme objetivo:\nSe for uma aula online: Deixe ambas opções desligadas. O anfitrião pode ligar seu video depois que já estiver na sala. Isso pode evitar inconvenientes.\nSe for uma reunião profissional: Deixe o video ligado para anfitrião e participantes.\nAudio - Deixe como está.\nOpções de reunião - O que habilitar também pode variar conforme objetivo:\nHabilitar entrada antes do anfitrião - Interessante para aulas online.\nDesabilitar o audio dos participantes após entrada - Interessante para aulas online.\nHabilitar sala de espera - Interessante para palestras agendadas\nGravar reunião no computador local - Habilite se tiver espaço em disco no computador.\n3.3 Clique no botão salvar! Sua reunião está criada. O próximo passo é enviar o convite aos participantes.\n3.4 Ao salvar o Zoom mostra uma tela de resumo sobre a reunião agendada.\n3.5 É possível adicionar a reunião ao seu calendário do Google ou do Outlook. Essa opção é legal se você tiver uma lista de contatos na sua aplicação. Uma vez criado o evento, basta editá-lo na sua aplicação e acrescentar os contatos para os quais quer enviar.\n3.5b Se não tiver uma lista de contatos, então basta escolher a opção de copiar dos dados do convite. Depois disso, abra um e-mail, cole e envie para quem quiser.\n3.5c Por fim, também é possível copiar só o link da reunião criada. Isso pode ser útil para enviar por exemplo, por Whatsapp.\nAgora, sua reunião está criada e seus participantes já saberão como ingressar.\n4. Iniciando uma reunião Uma vez criada a reunião, o anfitrião pode esperar até a data e horário desejados para iniciá-la.\n4.1 Para iniciar uma reunião, vá para a lista de reuniões clicando no botão reuniões no menu lateral esquerdo.\n4.2 Na lista de reuniões clique no botão iniciar para a próxima reunião disponível.\n4.3 O Zoom necessita instalar um plugin para funcionar. Ele iniciará o download automaticamente, conforme o sistema operacional executado pelo usuário. Deixe baixar e depois clique duas vezes no arquivo baixado para executá-lo em seu sistema.\n4.4 Após a instalação do Plugin, o Zoom abrirá uma tela de login. Se você definiu uma senha para reunião, deverá digitá-la.\n4.5 O Zoom abrirá uma nova tela para entrada na sala de reunião. Aqui é muito importante, logar como anfitrião (host)!\n4.6 Para terminar de entrar na sala, escolhar para ingressar utilizando o audio do seu computador (botão azul).\nOk. Agora você já está sendo o anfitrião de uma reunião iniciada. Basta esperar que seus participantes comecem a chegar, se é que já não chegaram.\n5. Gerenciando uma reunião (guia de sobrevivência) Uma vez na sala de reunião algumas coisas precisam ser conferidas.\n5.1 Audio funcionando?. Sem áudio fica difícil conduzir os participantes. É possível escolher quais periféricos usar do seu dispositivo, testar o áudio. Se o audio não estiver funcionando é aqui que você deverá ir para consertar, depois de verificar se o microfone está ligado.\n5.2 Mute ligado? Outra verificação inicial é se o microfone está desligado. Você pode deixá-lo desligado antes do início da reunião, assim poderá conversar normalmente, sem ser ouvido por quem está na sala.i\nÉ recomendável que o anfitrião ao entrar na sala, desligue imediatamente o microfone, enquanto se prepara para começar. Quando for começar, a primeira coisa a fazer é ligá-lo! \n5.3 Câmera ligada? Se quer privacidade antes de começar a reunião, pode deixá-la desligada. Lembra que isso foi definido durante a programação da reunião? Se quiser mostrar aos participantes que a reunião está mesmo em vias de ocorrer, pode deixá-la ligada. Isso é legal para aulas, onde o aluno fica vendo a sala vazia enquanto espera o professor.\n5.4 Como compartilho a tela? Melhor definir isso antes da reunião começar, de modo a evitar inconvenientes. Se for uma aula ou reunião expositiva, talvez seja melhor deixar apenas o anfitrião com o poder de compartilhar a tela. Se for uma reunião colaborativa, como um brainstorm, é possível que todos compartilhem. Confira e altere conforme preferência.\n Escolha aqui em pode compartilhar a tela.   Ao clicar em compartilhar, é possível compartilhar a tela \u0026ldquo;screen\u0026rdquo;, abrir um quadro branco de desenho \u0026ldquo;Whiteboard\u0026rdquo;, etc. A opção mais comum é compartilhar a tela, ou algum aplicativo aberto como o Powerpoint. É só escolher uma opção, ao clicar em share. Se for usar o quadro branco, é possível salvar o que foi desenhado para envio.  5.5 Quem pode falar no chat? Essa é outra opção que é melhor ser conferida enquanto a reunião não começa. Ao clicar no botão chat, ele aparece no lado direito da tela, mas as opções de configuração são escondidas.\n Abre o chat   Abre as opções de chat   Opções de chat:  Host Only - somente anfitrião conversa. No one - Ninguém conversa (chat desligado). Everyone Publicy - Todos podem conversar publicamente. Everyone Publicy and Privately - Todos podem conversar publicamente e também em reservado.    5.6 Dá pra enviar arquivos? No chat existe a opção file. Com ela é possível enviar um arquivo que está hospedado na sua máquina, no Google Drive, no Onedrive ou no Dropbox. O arquivo pode ser enviado para todos everyone ou só para alguém com quem está falando naquele momento no chat, como acontece em mensagens de whatsapp.\nTome cuidado de verificar se vai enviar para todos!  5.7 Dá pra gravar a reunião? Gravar a reunião pode ser interessante para rever erros, dúvidas que não puderam ser eclarecidas no momento ou mesmo para servir de ata.\n É possível pausar e retomar a gravação a qualquer momento. Isso é legal para o caso de no meio da reunião ocorrer uma pausa.  Um aviso importante: ao terminar a gravação ela não fica imediatamente disponível. Ela só estará disponível na hora que encerrar a reunião. Por isso, clicar em terminar a reunião é importante. Não vá apenas fechar a janela!  5.8 Como termino uma reunião? Basta clicar em End meeting.\nÉ isso aí. Se você gostou do manual, ou se acha que ele pode ser melhorado ou ter algo acrescentado, não perca tempo, deixe seu comentário, dúvida, elogio ou sugestão, logo abaixo. Será um prazer ouvir sua opinião! Abraço e \u0026ldquo;tamo junto\u0026rdquo; contra Covid! :)\n","description":"Em tempos de Covid, muita gente está trabalhando de casa. Este guia foi elaborado para ajudar a quem não tem experiência com TI, a realizar reuniões online, dar aulas e realizar palestras com a ferramenta Zoom!","id":15,"section":"posts","tags":["Covid","Remoto"],"title":"Videoconferência com Zoom","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-23-zoom-vid/"},{"content":"Prosseguindo na customização do Vim através da parametrização do .vimrc, vamos falar um pouco sobre verificadores de sintaxe e formatadores de código. Para evitar que o artigo fique grande demais, decidi quebrá-lo em 2 partes.\nHoje, na parte VI da série, trataremos sobre definições acerca do tema proposto. Deixaremos para a parte VII, as questões relativas à instalação e configuração desses utilitários.\nVerificadores de sintaxe e formatadores de código O que são, onde moram, como vivem, o que comem.\nVerificadores de sintaxe - Linters Linter vem da palavra \u0026ldquo;lint\u0026rdquo; que significa \u0026ldquo;fiapo ou penugem\u0026rdquo;. O termo vem de um utilitário usado na programação em linguagem C, existente no UNIX.\nA função de um utilitário \u0026lsquo;Lint\u0026rsquo; é realizar uma análise estática do código com objetivo de apontar e produzir uma lista de erros, advertências (warnings) e pontos de melhoria. Você não vai querer produzir um tecido cheio de fiapos, não é mesmo?\nFormatadores de código Os formatadores de código são ferramentas que melhoram a legibilidade de um programa, aplicando regras de formatação em conformidade com as boas práticas de desenvolvimento para uma determinada linguagem.\nVamos supor por exemplo, que temos um código formatado da seguinte maneira:\n if (a==b){ printf(\u0026quot;x\u0026quot;);}` Ao rodar um formatador sobre o código, ele poderá melhorar a legibilidade:\n if (a == b) { printf(\u0026quot;x\u0026quot;); } No caso acima, o utilitário reformatou o código, colocando espaçamentos, identação, etc, melhorando sua legibilidade e organização.\nEstratégias de utilização O processo de escrita de código pode ser um tanto maçante e sujeito a erros por parte do programador.\nUtilitários de verificação de erros e formatadores de código são ferramentas indispensáveis para aumentar a produtividade e a qualidade no desenvolvimento, pois:\n tornam o código mais legível reduzindo custo de manutenção poupam tempo na procura de erros simples  Quando um desenvolvedor vai utilizar um utilitário de verificação e formatação de código, ele pode fazê-lo a partir de 2 estratégias de trabalho distintas:\nSíncrona: O programador digita todo o código e então roda o utilitário de verificação ao salvar o arquivo.\n Vantagens:  O programador pode se concentrar no código sem preocupar-se em parar para consertar erros. É como se ele dividisse o trabalho em duas etapas: Primeiro codificar, segundo corrigir. O programador pode executar a verificação do código em lote, verificando por exemplo, vários arquivos de um mesmo diretório.   Desvantagens:  o utilitário não força a mudança do comportamento do programador. Logo, a evolução do programador para geração de códigos com melhor qualidade, acabará sendo mais lenta. essa estratégia precisa ser realizada de forma pragmática. Ou seja, o programador deve ter disciplina suficiente para NUNCA, JAMAIS, NUNQUINHA, esquecer de executar a etapa de verificação, após o término da codificação.    Assíncrona: À medida em que o programador vai digitando, o utilitário vai verificando o código e alertando sobre os erros.\n Vantagens:  Ao terminar de codificar, o programador já terá um código com mais qualidade. Ao ser alertado por erros enquanto digita, o programador acaba se tornando melhor, pois vai tomando ciência dos erros que produz e assim vai ajustando seu comportamento. Podemos dizer que a estratégia assíncrona é um tanto quanto behavorista. O programador não precisará executar a verificação no final do trabalho. Ele até pode fazer isso, se quiser, mas a lista de erros a corrigir (retrabalho), será bem menor.   Desvantagens:  a produtividade do programador acaba sendo mais baixa, pois ele tenderá a parar para corrigir os erros à medida que os mesmos são indicados. Mesmo melhorando com o tempo, esta questão irá incidir. Somente o fato de um alerta aparecer enquanto o código é digitado, já pode ser suficiente para desviar parte da concentração. a parametrização dos utilitários para ficarem monitorando o código digitado é um pouco mais chata. Além disso, podem tornar o editor de códigos um pouco mais lento. Em alguns momentos o programador poderá perceber um \u0026ldquo;lag\u0026rdquo; durante a digitação, no momenot em que o utilitário corre sobre o código e detecta um erro.    Boas práticas de CI/CD Bons programadores são antes de tudo, pragmáticos. Muitos optam por adotar tanto a estratégia de verificação assíncrona quanto a síncrona. Ou seja, eles deixam os utilitários de verificação trabalharem enquanto digita o código, mas não deixará de rodá-los novamente na hora de salvar o arquivo ou mesmo durante o processo de deploy.\nEm ambientes de produção aliás, é muito indicado que os processos de CI/CD (integração contínua e deploy contínuo) incluam as etapas de verificação de erros e formatação, impedindo o build e deploy com erros de sintaxe ou código mal formatado, aumentando a estabilidade de aplicações em produção.\nAnalisadores de Sintaxe e formatadores de código no Vim Existem vários plugins para formatar e verificar erros de código usando o editor Vim. É preciso cuidado ao instalar e utilizar esses plugins, pois os mesmos podem conflitar entre si, podendo acarretar o efeito inverso ao que se propõem.\nNo Vim, muitos programadores desistem de usar tais utilitários, justamente pela dificuldade em configurá-los para se obter o resultado esperado. No próximo artigo, falaremos sobre a instalação não conflitante de 3 plugins:\nALE - Plugin para monitoramento assíncrono de código\nESLint - um utilitário de análise sintática de código\nPrettier - um utilitário de formatação de código.\nAté lá\u0026hellip;\n","description":"Lint e Format - Melhorando a qualidade de código no Vim","id":16,"section":"posts","tags":["Vim"],"title":"Vim para dev Web - parte VI","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-21-config-vim-6/"},{"content":"Seu domínio Login.github.io Muitos desenvolvedores costumam manter seus projetos hospedados no Github e aproveitam a estrutura disponível para criar um blog ou um site usando o recurso do github pages.\nUma das facilidades que o Github oferece é permitir que o usuário tenha um domínio no formato: login.github.io. Isso é muito legal pois ajuda a economizar evitando a compra de um nome de domínio e ao mesmo tempo já soa bastante profissional. O meu por exemplo é: alansantosmg.github.io.\nMovendo somente o conteúdo Por algum motivo, quem utiliza o Github pode querer hospedar o conteúdo em outro lugar, mas ainda manter o uso do seu nome de domínio do Github. Mesmo quem compra um nome de domínio, pode querer uma coisa dessas e podem existir bons motivos para isso.\nNo meu caso, por exemplo, tenho currículos distribuídos em papel na mão de recrutadores, cartões de visita entregues a clientes e prospects. Todos esses artefatos possuem o meu domínio Login.github.io grafado. Seria impossível encontrar e avisar a todos sobre o novo endereço.\nRedirect A saída então é: ao hospedar o conteúdo em outro endereço, manter o antigo em funcionamento e fazer um redirecionamento. Assim, quem entrar no Login.github.io vai direto para o novo endereço.\nÉ possível fazer isso de forma muito simples em outros provedores, simplesmente hospedando uma página index.html com conteúdo em branco, mas com um redirecionador em seu cabeçalho. Uma vez hospedada essa página no endereço antigo, quando o mesmo for acessado, ela fará o direcionamento. Tudo lindo porém:\nO GITHUB NÃO PERMITE O REDIRECT DE REPOSITÓRIOS, POR QUESTÕES DE POLÍTICA DE SEGURANÇA.  Como fazer então?\nFazendo o redirect funcionar no Github Existe um pequeno macete para resolver a questão. Vamos por partes:\n  Primeiro é preciso mover o conteúdo para o novo local/endereço onde deve ficar hospedado.\n  Depois que mover todo o conteúdo para outro repositório, é preciso criar a página index.html e hospedá-la na raiz do repositório Login.github.io. A página pode ser igual ao modelo abaixo, tomando-se o cuidado de utilizar o endereço do novo local onde o conteúdo está agora hospedado:\n  1 2 3 4 5  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Redirecting to https://novoEndereco.algumaCoisa.com.br\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;0; URL=https://novoEndereço.algumaCoisa.com.br\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;alansantosmg.netlify.com\u0026#34;\u0026gt;   A seguir é necessário criar um segundo arquivo. Ele vai se chamar\n_config.yml. Esse arquivo vai ter uma linha só, que é a seguinte:  1  theme:jekyll-theme-cayman  Para finalizar, basta colocar os dois arquivos index.html e _config.yml na raiz do repositório Login.github.io.  Explicação A explicação para a mágica do segundo arquivo é a seguinte. Quando só temos o index.html, o Github considera o repositório como \u0026ldquo;um repositório\u0026rdquo; e não como um website pessoal ou de projeto e por isso, não permite o redirecionamento.\nQuando incluímos o _config.yml com aquela linha, o Github passa a enxergar o repositório como um site criado com o Jekyll, um gerador de conteúdo estático que gera sites que podem ser integrados ao Github. Como o repositório passa a ser entendido como um site, o redirecionamento passa a ser permitido, pois a arquivo index.html será executado quando alguém acessar o endereço Login.github.io.\nBom, por enquanto é isso. Espero que tenham gostado.\n","description":"Se vai migrar do Github mas quer manter o uso do domínio usuario.github.io em uso existe uma forma simples de fazê-lo, mas tem macete.","id":17,"section":"posts","tags":["Go"],"title":"Redirecionando do Github para outro local","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-15-redirect-github/"},{"content":"O longo caminho de volta Em 2019 iniciei minha empreitada para estabelecer meu espaço na web, independente das redes sociais.\nA opção de não trabalhar com plataformas de blog tradicionais, possibilitou experimentar tecnologias de ponta, como geradores de conteúdo estático (server less), CDN\u0026rsquo;s, CI/CD.\nMinha jornada compreendeu o seguinte caminho:\n  Comecei pelo Jekyll, um gerador de conteúdo estático em Ruby mais alinhado com Github. Optei por ele por ser o mais simples de configurar e gerar deploy na conta que eu já possuía no Github.\n  Cheguei a testar o Gatsby - gerador de conteudo estático em React, mas logo acabei desistindo, pois estou estudando Javascript puro. Achei melhor não aprender React pelo menos até consolidar meus conhecimentos em JS sem auxílio de frameworks.\n  Fui então para o Hugo - gerador de conteúdo estático em GO. Esse, me pareceu ser muito mais rápido do que os outros. Também gostei da estrutura do projeto. Fiz alguns testes, reconfigurando o blog inteiro nele, mas não cheguei a fazer um deploy. Eu ainda não tinha visto nada sobre a linguagem GO, então resolvi seguir para outra plataforma que fosse em Javascript.\n  Encontrei o Hexo - Gerador de conteúdo estático em Javascript Vanilla. O projeto é bem interessante. Estudei alguns temas e no final do ano fiz deploy usando essa plataforma. Tive um trabalhão para traduzir o tema de chinês para português. Senti falta de materiais em inglês. O projeto é bem documentado, mas creio que vale muito dar uma olhada no que as pessoas vem produzindo na comunidade.\n  Voltei para o Jekyll, que é feito em Ruby, mas pelo menos tem vasto material em inglês, é vastamente utilizado por usuários do github e tem a vantagem de ser simples mesmo de fazer o deploy. Esta era a plataforma que estava usando até dois dias atrás. Funciona que é uma beleza e os temas são fáceis de setar, customizar, mas tem algo que estava me incomodando muito: justamente o fato de ser em Ruby. Eu não vou estudar Ruby tão cedo, então para quem está aprendendo outras linguagens essa é uma restrição considerável.\n  Retornei ao HUGO. Quando instalei da primeira vez, fiquei curioso e fui conhecer a linguagem. Agora já tem alguns meses que estou estudando firme o Golang e vejo nessa linguagem, boas perspectivas. A experiência adquirida nas outras plataformas, está me possibilitando também uma experiência melhor com o HUGO.\n  Netlify - CDN com C/ Continuos Integration/Continuous Deploy.\n  Passar por todas essas plataformas demandou quase um ano de estudo. Porém, todo o trabalho ajudou a entender sobre tecnologias server-less sob várias perspectivas.\nPor hora, ficarei no HUGO como plataforma principal por alguns motivos bem específicos à minha realidade:\n  Particularmente acho que a organização física do projeto HUGO tem boa separação entre conteúdo, plataforma, temas e customizações de tema. Para mim, essa característica é importante pois facilita bastante a tarefa de customização do site e me permite experimentar mais, quebrando menos.\n  Vejo vantagem no fato do HUGO ser desenvolvido em GO, uma linguagem desenvolvida pelo Google e que ao meu ver ganhará boa popularidade nos próximos anos. Não por acaso, é a linguagem que estou adotando como primária para aprendizado, juntamente com o Javascript. Ao invés de instalar uma versão compilada, optei por baixar os fontes do Hugo e compilá-los diretamente na minha máquina. Assim posso estudar em detalhes de como vem sido de desenvolvido e quem sabe, futuramente até poder dar minha contribuição em código.\n  Por enquanto, resolvi dar o deploy do blog já convertido para HUGO, no Gitbhub, mas dentro de alguns dias devo virar para o Netlify, já que a plataforma possui os processos de CI/CD, os quais também estudo, além de oferecer melhor performance na entrega de conteúdos.\nEntão Let\u0026rsquo;s \u0026ldquo;GO\u0026rdquo; 2020!\n","description":"Após passar por 4 tipos de plataformas de geração estática de conteúdo, voltar ao HUGO parece ser a decisão mais coerente no momento.","id":18,"section":"posts","tags":["HUGO","Go"],"title":"Retornando ao Hugo","uri":"https://alansantosmg.netlify.com/pt/posts/2020-03-11-hugoagain/"},{"content":"Aprendendo GO sem instalar um compilador A equipe do GO disponibiliza uma interface REPL na web para quem quiser escrever e testar seus códigos.\nObviamente não é um recurso para desenvolvimento de grandes projetos.\nTodavia, trata-se de uma excelente ferramenta de aprendizado que possibilita rodar, formatar e compartilhar pequenos trechos de código, sendo ideal para estudantes.\nOutra coisa legal é que ela está disponível para quem quiser usar em seu site (desde que utilize apenas uma instância), bastando solicitar à equipe autorização para instalar.\nPara quem quer brincar com o Go, basta acessar: The Go playground\n","description":"Aprendendo Go sem instalar compilador. Uma forma interessante de aprender a linguagem testando pequenos trechos de código no próprio navegador web.","id":19,"section":"posts","tags":["Go"],"title":"Golang Playground","uri":"https://alansantosmg.netlify.com/pt/posts/2020-02-26-goplayground/"},{"content":"Lista de temas nativos do editor Vim 8 ","description":"Temas nativos do Vim 8","id":20,"section":"gallery","tags":[""],"title":"Vim-temas","uri":"https://alansantosmg.netlify.com/pt/gallery/vim-themes/"},{"content":"Como prometido anteriormente, no artigo de hoje falaremos um pouco sobre uso de temas no Vim.\nTemas Os temas do Vim, assim outros Editores de código, compreende uma série de ajustes visando o uso de cores para a codificação digitada e também cores de fundo da aplicação, barras de numeração, barra de status, etc.\nO vim na versão 8 já vem com alguns temas padrões. Eles podem ser configurados de duas formas:\n via linha de comando; via parametrização no arquivo .vimrc.  Também é possível baixar e instalar novos temas, o que também pode ser feito de duas formas:\n manualmente; através de um gerenciador de plugins;  Neste artigo falaremos somente da primeira forma. A instalação de temas via gerenciadores de\nplugins será abordada no nosso próximo post onde introduziremos o uso de Plugins para extender as funcionalidades do Vim.\nTemas padrão Clique aqui e conheça todos os temas que já vem por padrão no Vim 8 ou superior\nAlterando o tema on the fly Para alterar o tema durante o uso do editor basta entrar no modo normal, teclando : e a seguir digitar colorscheme nomeDoTema. Vejamos um exemplo:\n: colorscheme torte Tema padrão Para definir um tema padrão é preciso acrescentar algumas linhas ao arquivo .vimrc conforme a seguir:\n\u0026quot; Utiliza cores se terminal suportar if (has(\u0026quot;termguicolors\u0026quot;)) set termguicolors endif \u0026quot; Seta tema padrão colorscheme torte \u0026quot; Alguns temas tem opção de fundo claro ou escuro \u0026quot; Utilize dark ou light se for o caso set background=dark Finalizando Para dar uma folga, o artigo de hoje foi mais curtinho, tranquilo. Nos próximos, começaremos a falar sobre o uso de plugins. Eles ajudam a extender as capacidades do Vim, transformando-o em um verdadeiro canivete suiço. Como estamos falando de desenvolvimento web, focaremos em alguns plugins voltados especificamente para melhorar esta atividade. Por enquanto é só. Até a próxima postagem!\n","description":"Você sabia que o Vim 8 vem com diversos temas nativos. São 17 temas ao todo, permitindo uma experência de trabalho mais agradável em dark ou light modes.","id":21,"section":"posts","tags":["Vim","Linux"],"title":"Vim para dev Web - Parte V","uri":"https://alansantosmg.netlify.com/pt/posts/2020-02-13-config-vim-5/"},{"content":"image: images/feature3/xfce.png\nQuem usa computadores que possuem a tecla Windows e acaba se acostumando com as facilidades que ela oferece como atalho de teclado.\nAo migrar para o linux com XFCE, experimentei certo dia tentar minimizar todas as janelas usando\na sequência de teclas Windows + d e não funcionou. Pequisei a respeito e descobri que a a sequência no XFCE é Control + alt + d. Mais chatinho de digitar, né?\nA boa notícia é que é possível mudar esse comportamento no XFCE. Para isso, usando o editor de sua preferência, vamos acertar isso. No caso eu uso o Editor vim, mas pode ser qualquer outro como o mousepad, gedit, VScode. Vamos lá?\n1. Abra um terminal e use seu editor: vim ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml 2. Procure pela palavra: show_desktop_key. 3. Esta é a propriedade que deverá ser alterada: \u0026lt;property name=\u0026quot;\u0026amp;lt;Super\u0026amp;gt;Alt\u0026amp;gt;d\u0026quot; type=\u0026quot;string\u0026quot; value=\u0026quot;show_desktop_key\u0026quot;/\u0026gt; 4. Altere para: \u0026lt;property name=\u0026quot;\u0026amp;lt;Super\u0026amp;gt;d\u0026quot; type=\u0026quot;string\u0026quot; value=\u0026quot;show_desktop_key\u0026quot;/\u0026gt; Terminada a alteraçao, reinicie o computador, entre no XFCE, abra algumas janelas e experimente minimizá-las usando a sequência de teclas windows + D.\n","description":"Quem usa computadores que possuem a tecla Windows e acaba se acostumando com as facilidades que ela oferece como atalho de teclado. Que tal usá-la para minimizar todas as janelas do XFCE?","id":22,"section":"posts","tags":["Linux"],"title":"Atalho para minimizar todas janelas no XFCE","uri":"https://alansantosmg.netlify.com/pt/posts/2020-02-07-atalhoshowdesktopxfce/"},{"content":"Olá pessoal. No artigo de hoje, realizaremos mais algumas configurações no arquivo .vimrc que ajudarão a melhorar a experiência com o editor.\nMelhorando a usabilidade Evitando travamentos Uma das coisas mais chatas que ocorria quando eu comecei a usar o Vim, eram travamentos ocasionais do editor dito como \u0026ldquo;super estável e leve\u0026rdquo;. Ao investigar mais a fundo a questão, acabei descobrindo que o problema não estava no software e sim em quem está sentado na cadeira operando (risos).\nDe fato, o que ocorria era o seguinte: por uma questão de hábito quando trabalhava com outros editores, eu costumava dar um \u0026lt;Ctrl\u0026gt; \u0026lt;s\u0026gt; de tempos em tempos para garantir que meu trabalho fosse salvo. Essa atividade estava tão enraizada no subconsciente que eu nem percebia que estava fazendo isso também no Vim.\nAo realizar essa ação \u0026ldquo;automática\u0026rdquo;, o Vim parecia ficar travado, mas a verdade é que o \u0026lt;ctrl\u0026gt; \u0026lt;s\u0026gt; é um comando que desliga o fluxo de transmissão de dados do editor.\n Se o Vim travar repentinamente, experimente teclar \u0026lt;ctrl\u0026gt;\u0026lt;q\u0026gt; para fazê-lo voltar ao normal.\n Quem vem de outros editores certamente passará por essa situação em algum momento. Então para previnir sua ocorrência, basta adicionarmos um parâmetro ao nosso arquivo .bashrc que fica no diretório /home/nomeDoUsuário. Para fazer isso, abra um terminal e digite o seguinte comando:\necho \u0026quot;stty -ixon\u0026quot; \u0026gt;\u0026gt; ~/.bashrc O comando acima adiciona a linha contendo stty -ixon ao final do arquivo .bashrc. Outra forma de incluir seria abrir o arquivo no Vim e incluir a parametrização no final dele. Fique à vontade para fazer da forma que achar melhor.\nMais alterações no .vimrc Vamos adicionar mais alguns parâmetros interessantes ao nosso .vimrc.\nTchau tela de boas-vindas Começaremos tirando aquela tela inicial de boas-vindas. Assim o editor abrirá direto numa janela em branco. Parece bobagem, mas será 1 tecla a menos pressionada, toda vez que você iniciar o editor.\nset shortmess+=I Refresh de alteraçoes externas Muitas vezes, acabamos realizando alterações em arquivos que estão abertos no Vim usando outra aplicação. Para que o Vim perceba que o arquivo foi alterado externamente, precisamos incluir um parâmetro que fará o editor ler novamente o arquivo em que estamos trabalhando caso ele tenha sido modificado. Inclua no seu .vimrc:\nset autoread Melhorando o scroll Outro parâmetro interessante é fazer a rolagem da tela iniciar antes do cursor chegar na borda superior ou inferior da janela, tornando a navegação menos cansativa. Adicione ao seu .vimrc:\nset scrolloff=5 Novas janelas O Vim permite trabalhar com várias janelas dividas na tela, seja na horizontal, vertical ou ambos. Nos parâmetros abaixo, configuramos o editor para abrir janelas horizontais, sempre abaixo da janela atual. No caso de janelas verticais, também é interessante parametrizar para abrir sempre à direita da janela atual. Assim quem está usando, sempre saberá onde a nova janela será aberta. Vamos colocar esses 2 parâmetros em nosso .vimrc:\nset splitbelow set splitright Status sempre à mostra No .vimrc vamos incluir um parâmetro para sempre deixar à mostra a barra de status.\nset lastsatus=2 Mostrando comandos digitados Além de sempre mostrar a barra de status, também vamos parametrizar o Vim para sempre podermos ver os comandos digitados, incluindo em nosso .vimrc:\nset showcmd Escondendo buffer Outro parâmetro relacionado à barra de comandos, refere-se ao que o Vim faz quando fechamos um buffer (arquivo carregado na memória pelo Vim). Para não ter que ficar fechando e abrindo o mesmo arquivo, podemos habilitar o recurso de esconder o buffer da tela. Acrescente no seu .vimrc:\nset hidden Autocompletando comandos Podemos habilitar o autocompletar para comandos com a tecla TAB, igual ao funcionamento no shell bash:\nset wildmode=longest,list Linha de comando dupla Também podemos ter uma linha de comando um pouco maior abaixo da barra de status, acrescentando:\nset cmdheight=2 Alertas visuais Para o editor não ficar apitando na cabeça a cada erro, que tal adicionar um parâmetro que converte avisos sonoros em visuais? Inclua aí no .vimrc:\nset t_vb= Desligando o match de []{}()  O parâmetro abaixo Desabilita o destaque de conjuntos de paranteses, aspas, etc. Alguns desenvolvedores gostam de manter isso ligado. Eu prefiro desabilitar pois confunde na hora da digitação. Para habilitar use 2 parâmetros: set showmatch e set matchtime = 2. Para desabilitar, use o que está abaixo:  set noshowmatch Uma alternativa ao showmatch que pode melhorar a usabilidade é alterar a cor de destaquedo cursor quando em cima de conjuntos de parenteses, aspas, colchetes:  hi MatchParen cterm=bold ctermbg=none ctermfg=red Destacando o cursor Outra parametrização controversa é mostrar a linha em que o cursor se localiza no momento em um tom mais claro. Use se gostar:\nset cursorline Evitando erros ao sair Na pressa, às vezes queremos teclar wq para sair do editor e teclamos por exemplo Wq, ocasionando erro. Para evitar esse tipo de coisa, vamos criar alguns aliases que facilitarão em muito a vida:\ncab W w cab Wq wq cab wQ wq cab WQ wq cab Q q Mudando a tecla LEADER No vim, a tecla LEADER normalmente é a / .Podemos alterá-la para ser a tecla de vírgula: :\nlet mapleader=\u0026quot;,\u0026quot; Limpeza do destaque de buscas A próxima parametrização, mapeia \u0026lt;espaço\u0026gt; para limpar o destaque da busca (quando vc busca termo errado). Se quiser limpar a busca digite \u0026lt;,\u0026gt; (vírgula) e a seguir \u0026lt;espaço\u0026gt; configurando o seguinte no seu .vimrc:\nnnoremap \u0026lt;leader\u0026gt;\u0026lt;space\u0026gt; : nohlsearch\u0026lt;CR\u0026gt; Seleção com setas (Windows like) Particularmente, considero a próxima parametrização altamente dispensável, visto que o vim possui um jeito muito melhor de fazer seleções com o teclado através do modo visual, teclando no modo normal v para selecionar na linha, V para selecionar linhas inteiras, ou ainda \u0026lt;ctrl\u0026gt; v, para selecionar blocos de texto, inclusive no sentido de colunas.\nPara quem está acostumado a fazer seleções usando as teclas  + SETA, como no Windows, basta adicionar as linhas abaixo ao .vimrc.\nset selectmode=mouse,key set mousemodel=popup set keymodel=startsel,stopsel set selection=exclusive Edição no diretório corrente A configuração abaixo permite que ao editar um arquivo, o Vim mude o contexto para o diretório em que mesmo se encontra. Muito útil quando abrimos o arquivo no Vim a partir de outro diretório e lembramos que queremos alterar algum outro arquivo nesse mesmo diretório.\nset autochdir Finalizando Dessa vez fizemos mudanças substanciais no comportamento do Vim de modo a melhorar a usabilidade e evitar erros bobos que tomam muito tempo. No próximo artigo falaremos um pouco sobre temas/esquemas de cores. O uso de esquemas de cores, além de melhorar a legibilidade, tornam o editor mais atraente para uso.\nAté a próxima!\n","description":"Saiba porque às vezes o Vim parece travar sem motivo algum e aprenda como evitar que isso ocorra novamente.","id":23,"section":"posts","tags":["Vim","Linux"],"title":"Vim para dev Web - Parte IV","uri":"https://alansantosmg.netlify.com/pt/posts/2020-02-03-config-vim-4/"},{"content":"O que já sabemos leva o mundo de 1 a n. Somente quando criamos algo novo, saímos de zero para 1. É muito mais difícil imaginar algo novo do que imaginar aprimoramentos sobre algo que já existe. O ato de criação é singular.\nIr de 1 a n significa a realização de progresso horizontal ou incremental: ou seja melhorar ou tornar mais eficiente, algo que já existe.Por outro lado, ir de zero significa a realização de progresso vertical ou intensivo que se traduz em inovação radical, criar algo completamente novo.\nÉ com base nessa idéia que se desenvolve o livro De Zero a Um - Peter Thiel.\nStartups e a estranha verdade sobre o cotidiano O livro nos faz refletir sobre nosso cotidiano que embora nos pareça moderno à primeira vista, é estranhamente ultrapassado e que a compreensão deste aspecto da realidade é justamente o coração das empresas startups.\n Uma startup é uma empresa menor do que uma grande organização e maior do que uma pessoa só. Sua força é pensar. Uma startup de verdade, precisa questionar ideias conhecidas.\n Mas qual seria exatamente o questionamento a fazer? Para o autor, esta questão pode ser expressa tanto em termos de visão pessoal quanto em termos de visão de negócios:\n Sobre que verdade importante pouquíssimas pessoas concordam com você?\nQue empresa valiosa ninguém está construindo?\n O livro de zero a um não trará respostas a essas perguntas, mas mostrará os caminhos possíveis para a busca de respondê-las o que levará o leitor a repensar e questionar diversos conceitos sobre economia, mercado e criação de negócios.\nRevendo conceitos Durante a leitura, somos levados a refletir sobre diversas conceituações as quais costumamos aceitar sem pensar muito.\nPor exemplo, o autor considera que Capitalismo e concorrência são definições conflitantes pois o primeiro prega a concorrência sob as mesmas condições para todos, porém a concorrência perfeita não gera lucros e consequentemente mata o Capitalismo, já que sem lucro não há acumulação de capital.\nSegundo o autor, o Capitalismo na verdade é fruto do desequilíbrio provocado pela concorrência igualitária e que a busca pelo monopólio (e não a existencia deles) é que gera a competição e os conflitos. Ele ilustra esse conceito comparando duas visões de mundo distintas:\n Para Marx, as pessoas lutam porque são diferentes (luta de classes).\n  Para Sheakspeare, as pessoas lutam quando se tornam semelhantes.\n Não à disrupção A diferença entre as visões de mundo de Sheakspeare e Marx, levam a outra ideia que faz \u0026ldquo;De Zero a Um\u0026rdquo;, a se destacar frente a outras obras sobre novos negócios e inovação: É preciso dizer não à disrupção!\nSe uma empresa é vista como concorrente ou oposta às existentes, ela não se tornará um monopólio. A inovação radical, pressupõe a não concorrência, visto que o que está sendo criado é totalmente diferente de algo que já existe.\nA receita do sucesso não existe Entender a questão da disrupção, ajuda a esclarecer ao longo de todo livro, uma dura verdade que muitos empreendedores ignoram: não existe receita para inovação e o que importa do futuro é que ele será na época em que o mundo parecerá diferente de hoje. Ele será diferente e estará ancorado no mundo atual.\nPara terminar esta resenha, nada melhor do que mais alguns questionamentos levantados por essa envolvente obra:\nAntes de abrir um negócio, pense\u0026hellip;\n Quais segredos a natureza não está lhe contando? Quais segredos as pessoas não estão lhe contando?   O melhor lugar para procurar segredos é onde ninguém está procurando...\n Não deixe de ler: De Zero a Um - Peter Thiel\n","description":"Resenha - O que podemos aprender com as startups do Vale do Silício. Um livro sobre a inovação em um mundo extremamente competitivo.","id":24,"section":"posts","tags":["Livros"],"title":"De zero a Um","uri":"https://alansantosmg.netlify.com/pt/posts/2020-01-30-dezeroaum/"},{"content":"Olá,\nmeu nome é Alan, moro em Belo Horizonte, Minas Gerais e sou um profissional da área de tecnologia da informação.\nEm mais de 20 anos de profissão, já atuei como analista de suporte, de processos, adm. de redes, coordenador de sistemas e infraestrutura, gerente de projetos, gerente geral de TI e desenvolvimento. Meus interesses em tecnologia vão de sistemas operacionais ao desenvolvimento de aplicações com linguagens modernas, passando por metodologias de gestão e governança em TI.\n Hoje me interesso por:  Desenvolvimento JamStack com html, css, Javascript, Golang (Go). Frameworks JamStack como HUGO, HEXO, JEKYLL, GATSBY. Plataformas de nuvem: AWS, MS-Azure e CDNs com CI/CD. Sistema de gestão de produção Kanban.    \nCurrículo Vitae   Portfólio  \nEm computadores: Atualmente utilizo o sistema operacional:\n  Linux xubuntu 19.10, GUI: XFCE 4.12, Window manager: i3\n  Para desenvolvimento utilizo:\n Editor Vim 8, Google Chrome, Git, Github e Gimp (imagens).    \nSou apaixonado por, cinema, rock, jazz, pop e black music, livros, física e astronomia.\nMeu Top 6 em cinema:\n Birdman - A inesperada virtude da ignorância Blade Runner - O caçador de andróides The First Man Era uma vez em Hollywood O que fazemos nas sombras Star Wars (ep IV e V)   Meu top: 6 em literatura:\n Duna - Frank Herbert Os miseráveis - Victor Hugo As aventuras de Robin Wood - Alexandre Dumas A volta ao mundo em 80 dias - Júlio Verne Assassinato no Expresso do Oriente - Agatha Christie' Nightfall and Others stories - Isaac Asimov  \n","description":"Sobre Alan Santos","id":25,"section":"","tags":null,"title":"","uri":"https://alansantosmg.netlify.com/pt/about/"},{"content":"Olá! Aqui estamos com o terceiro artigo da série, \u0026ldquo;Configurando o Vim para desenvolvimento Web\u0026rdquo;. Vamos começar fazendo uma pequena revisão sobre o artigo anterio e depois prosseguiremos realizando mais configurações em nosso ambiente de desenvolvimento.\nRecapitulando a parte II Se você seguiu o post anterior, o arquivo .vimrc que você criou no seu diretório home, deverá estar assim:\nsource $VIMRUNTIME/defauts.vim set nocompatible set encoding=utf-8 set nobackup set nowritebackup set noswapfile set number set ruler syntax on set visualbell Configurações de texto Hoje, vamos realizar algumas configurações de apresentação e formatação de textos para\ndesenvolvimento, como indentação, configuração de tabulação (tabs) e também parâmetros de\nbusca, além de persistir os históricos de últimos comandos e últimas alterações. Mão na massa!\nParâmetros de busca  Ignora maiúsculas e minúsculas nas buscas. Se começar uma busca em maiúsculo ele habilita o case. Destaca no texto, termos procurados na busca. Inicia busca a medida que caracteres são digitados.  set ignorecase set smartcase set hlsearch set incsearch Regras de indentação de código  Aplica indentação na linha atual, (por ex: dentro de uma função) ao teclar enter. Usa regras de indentação de acordo com a extensão do arquivo editado. Necessita da configuração autoident setada. Habilita indentação conforme o tipo de arquivo. Habilita tabulação inteligente conforme o tipo (extensão) do arquivo. Tranforma tabs em espaços. Configura tamanho da tabulacao padrão como 2 espaços. Garante que backspace consiga remover indentações, apagar fim e começo de linha. Número de espaços percorridos (2) ao teclar backspace (voltar tabulação). Por padrão, quando usando auto-indent usar 2 espaços (1 tabstop) usando shiftwidth e\nsofttabstop.  set autoindent set smartindent set filetype indent on set smarttab set expandtab set tabstop=2 set backspace=ident, eol, start set backspace=2 set shiftwidth=2 set softtabstop=2 Histórico de comandos e alterações Aumentando o tamanho dos históricos Além das configurações de texto, talvez seja importante aumentar o tamanho do histórico de\núltimas alterações e histórico de últimos comandos, além de manter esses dois históricos mesmo\nse o arquivo for salvo e/ou ou o Vim for fechado. Bacana, não acha? Vamos configurar:\n Desfazer até 1000 alterações Guarda histórico dos 1000 últimos comandos  set undolevels =1000 set history=1000 Persistindo o histórico de comandos  Para armazenar o histórico de comandos, precisamos criar um arquivo. O melhor é que ele\nseja criado fora do diretório onde o arquivo está sendo editado. O Vim cria um diretório oculto dentro do diretório home do usuário. É interessante deixar tudo junto, então dentro do diretório /home/nomeDoUsuário/.vim vamos criar um subdiretório chamado infodir. Para isso será preciso digitar o seguinte comando no terminal:  mkdir ~/.vim/infodir Uma vez criado o diretório infodir, podemos parametrizar o .vimrc com a seguinte linha para guardar o histórico de comandos dentro do arquivo viminfo:  set viminfo='10,\\\u0026quot;30,:20,%,n~/.vim/infodir/viminfo Além disso também podemos parametrizar o Vim para iniciar com o cursor no mesmo lugar onde estava (através da informação armazenada no viminfo) quando o arquivo foi fechado (caso volte a editá-lo posteriormente):  au BufReadPost * if line(\u0026quot;'\\\u0026quot;\u0026quot;)|execute(\u0026quot;normal `\\\u0026quot;\u0026quot;)|endif Persistindo o histórico de alteraçõs  O vim pode manter arquivos com histórico de alterações. Como ele cria um arquivo de histórico de alterações para cada arquivo editado, o melhor é criar um subdiretório dentro de /home/user/.vim/. Você deve criar esse diretório usando o terminal:  mkdir ~/.vim/undodir Dentro do diretório undodir serão criados os arquivos que guardarão as alterações dos arquivos editados. Mesmo se vc salvar e fechar o arquivo que está trabalhando, será possível posteriormente desfazer alterações se voltar a editá-lo. Como já temos nosso diretório undodir agora vamos parametrizar o .vimrc:  set undodir=~/.vim/undodir set undofile Finalizando Bem, vamos ficar por aqui. No próximo artigo, iremos incluir algumas melhorias para tornar o editor ainda mais amigável e interessante para desenvolvimento e também uso geral.\nEspero que tenham gostado e até a próxima.\n","description":"Aprenda a manter o histórico de alterações de arquivos no Vim, mesmo fechando o editor. Saiba como parametrizar identação do código, numeração das linhas e muito mais.","id":26,"section":"posts","tags":["Vim","Linux"],"title":"Vim para dev Web - Parte III","uri":"https://alansantosmg.netlify.com/pt/posts/2020-01-28-config-vim-3/"},{"content":" \u0026quot; O vim é meu editor de textos favoritos. Eu o tenho usado por anos\u0026hellip; mas eu não consigo descobrir como sair dele\u0026hellip;\u0026quot;\n Vim a sério Se você está lendo este post, parto do pressuposto que você já deve ter o mínimo de familiaridade com o Vim. Por familiaridade entendo: saber entrar, saber editar texto e claro, saber SAIR, para não ser motivo de piadas infames. :-D\nSe ainda não aprendeu a se virar no Vim, sugiro fazer o Vim tutorial ou pelo menos dar uma olhada na minha lista com os principais comandos do Vim e exemplos de uso do editor.\nArquivo de configuração O Vim normalmente vem instalado na maioria das distribuições Linux e também pode ser instalado no Windows. Em todo caso, quando ele é iniciado, ao contrário de vários programas, é preciso criar um arquivo de configuração.\nO nome desse arquivo é .vimrc.\nOnde colocar o arquivo de configuração no Linux No linux os arquivos iniciados com . são arquivos que ficam escondidos e que só podem ser visualizados através de um ls -a. O .vimrc deve ser criado no diretório home do usuário, ou seja, dentro de /home/nomeDoUsuário. Para criá-lo, vá até o diretório citado e no terminal digite o comando touch .vimrc.\nOnde colocar o arquivo de configuração no Windows No Windows o melhor lugar para esse arquivo é em c:\\usuários\\nomeDoUsuário\\. Ele também pode se chamar _vimrc ou _gvimrc, se você estiver usando o Gvim (Vim para interface gráfica).Para criá-lo vá até o diretório e crie um novo arquivo usando o notepad.\nConfiguração inicial Para iniciar a configuração do Vim, precisamos incluir opções de parametrização dentro do .vimrc. Para isso abra o arquivo preferencialmente usando o próprio Vim, pois assim podemos carregar nossas configurações sempre que ele for modificado após salvá-lo, utilizando um comando do próprio editor.\nUm detalhe importante: dentro do .vimrc tudo que vem depois de \u0026quot; é considerado como comentário e não será processado quando o Vim for iniciado. Isso é ótimo para tornar o arquivo de configuração auto-documentado.\nVamos começar acrescentando algumas linhas para configuração inicial:\n\u0026quot;Carrega opçoes mais comuns do editor\u0026quot; source $VIMRUNTIME/defauts.vim \u0026quot;Força o vim a não ser compatível com opçoes do antigo editor\u0026quot; set nocompatible \u0026quot;Garante que os arquivos serão salvos no padrão de codificação universal\u0026quot; set encoding=utf-8 Desativando o backup Por padrão, o Vim faz backup dos arquivos que estão sendo editados e os salva de acordo com a seguinte regra de nomeação: ~nomedoarquivo.\nO que parece uma vantagem, torna-se um incômodo depois, principalmente em projetos grandes onde se usa o git para controlar versionamento do projeto e subir arquivos para produção. Se você editar 10 arquivos, terá 10 arquivos de backup a mais em seu projeto. Como num projeto de desenvolvimento já estamos usando o GIT para controlar o versionamento, o backup de arquivos do Vim passa a não fazer sentido. Por isso é melhor desativar essa opção acrescentando ao nosso .vimrc:\n\u0026quot;Configura o vim para não criar arquivos de backup\u0026quot; set nobackup set nowritebackup Desativando o arquivo de swap Nos tempos em que computadores tinham pouca memória, o Vim fazia uso do recurso de criação de arquivo de Swap para poder manter em disco parte de arquivos grandes que estavam sendo editados e que não caberiam totalmente na memória. Hoje em dia, com o barateamento dos chips de memória,\nessa opção também se tornou obsoleta. Então o melhor a fazer é desativá-la. Vamos acrescentar mais uma configuração ao .vimrc:\n\u0026quot;Desativa arquivo de swap\u0026quot; set noswapfile Configuração básica para desenvolvimento Para tornar a edição mais amigável, vamos acrescentar algumas funcionalidades básicas para quem usa editores para \u0026lsquo;coding\u0026rsquo;. São elas, numeração das linhas, numeração das colunas e syntax highlight. Por fim, vamos desabilitar o \u0026ldquo;beep\u0026rdquo; que soa quando digitamos algum comando incorreto.\n1 2 3 4 5 6 7 8 9 10 11  \u0026#34;Mostra coluna com numeração das linhas na lateral esquerda\u0026#34; set number \u0026#34;Mostra linha/coluna atual no lado direito da barra de status\u0026#34; set ruler \u0026#34;Habilita sintax highlight - depende da extensão do arquivo editado\u0026#34; syntax on \u0026#34;Troca o alarme sonoro de erro por alarme visual na barra de status\u0026#34; set visualbell   Mouse Se você estiver usando inteface gráfica, é possível usar o mouse dentro da janela de terminal\nonde o vim ou Gvim está carregado. Para isso basta adicionarmos uma linha ao arquivo .vimrc.\nSe você quer ficar fera no Vim, recomendo não incluir essa opção. Para quem não dispensa o uso\ndo mouse, aí está:\n\u0026quot;Torna o Vim compatível com maioria dos mouses do mercado (all).\u0026quot; set mouse=a Finalizando O artigo ficou grande, mas o objetivo aqui não é apenas listar os comandos e sim explicá-los\npara que cada um possa usá-los ou não conforme sua necessidade.\nNo próximo artigo, prosseguiremos personalizando o Vim para edição de texto, propriamente dita.\nEspero que tenham gostado do artigo. Deixem seus comentários lá no post do Linkedin. Assim,\npodem colaborar com os colegas.\nAté mais!\n","description":"Saiba como criar um arquivo de parametrîzação do Vim. Realize parametrizações essenciais para se começar a trabalhar confortavelmente com o editor.","id":27,"section":"posts","tags":["Vim","Linux"],"title":"Vim para dev Web - Parte II","uri":"https://alansantosmg.netlify.com/pt/posts/2020-01-22-config-vim-2/"},{"content":"Olá, depois de passar 3 anos utilizando o Visual Studio Code da Microsoft, resolvi em 2020, aprender e mudar para o Editor Vim. Pode parecer que estou indo na contramão, pois grande parte dos desenvolvedores de Apps e Web tem adotado cada vez mais o VSCode em seus projetos, mas trata-se de uma mudança bem racional de paradigma. Vejamos os motivos:\nVim versus todos s outros Por que o Vim?  Foco: Com o Vim não preciso ficar usando o mouse e isso ajuda a melhorar a concentração: manter as mãos no teclado evita mudança de contexto durante o trabalho. Velocidade: manter as mãos no teclado o tempo todo evitando parar para abrir menus, mover ou fechar janelas e selecionar texto, torna-se uma segunda vantagem pois aumenta consideravelmente a produtividade. Compatibilidade: O Vim já vem instalado por padrão em várias distribuições Linux. Portanto,já poupa o trabalho de instalação. O vim possui um arquivo único de configuração, o que torna fácil portar sua configuração entre máquinas. Uso remoto: Com o Vim, não é preciso de plugins para trabalhar remotamente. Basta abrir uma conexão SSH e pronto. Ele é levíssimo para se usar em conexões remotas lentas. Não há competidor. Baixo consumo de memória: os editores baseados em inteface gráfica, consomem muito mais memória do que o Vim e isso pode tornar algumas operações lentas, sobretudo com arquivos grandes ou na edição de múltiplos arquivos ao mesmo tempo. No Vim, posso abrir dezenas de arquivos ao mesmo tempo e ele continua super veloz. Uso de terminal: o que parece uma desvantagem é uma enorme vantagem. O Vim roda muito mais estável pois não depende de interface gráfica para rodar. Raramente irá travar, muito diferente de outros editores. Alta customização: Sistema de plugins robusto. O Vim possui ótimos gerenciadores de plugins e com um comando é possível adicionar funcionalidades importantes, principalmente para quem desenvolve, transformando-o em um verdadeiro canivete suiço. Edição visual em bloco: Com o Vim, é possível nativamente fazer a edição de blocos de texto em colunas, sem nenhuma dificuldade. Essa é uma das funcionalidades mais bacanas que o Vim faz melhor que outros editores. Gravação de macros: com o Vim é fácil gravar macros para executar atividades repetitivas. Gerenciamento de janelas: No Vim, você pode criar múltiplos workspaces, cada um com seu arranjo de janelas e ainda por cima salvar facilmente esses arranjos. Assim, com um comando, você pode restabelecer seus ambientes de trabalho de forma super rápida.  Aventurando-se no Vim Hoje, já não tenho mais o VSCode instalado em minha máquina e uso apenas o Vim, seja para desenvolvimento, seja para outras atividades. Demorei alguns dias a me acostumar com o paradigma modal (ao usar você vai entender), mas depois que decorei os principais atalhos de teclado, percebo que minha produtividade só aumentou. Com o passar dos dias fui sentindo falta de algumas coisas e então parti para a instalação de plugins e customização do Editor, tornando-o uma ferramenta ainda melhor.\nNos próximos posts, contarei um pouco dessa experiência e entrarei em detalhes sobre como parametrizar o Vim para torná-lo uma ferramenta de desenvolvimento avançada para html, CSS e Javascript.\nA aventura está apenas começando. :-)\n","description":"O Editor Vim, pode parecer espartano e pouco convidativo à primeira vista, mas quem aprende a dominá-lo não volta para outros editores. Entenda porque o Vim possui uma legião de adoradores e como ele pode ajudar você a ser mais produtivo.","id":28,"section":"posts","tags":["Vim","Linux"],"title":"Vim para dev Web - Parte I","uri":"https://alansantosmg.netlify.com/pt/posts/2020-01-21-config-vim-1/"},{"content":"Resolvi começar o ano aprendendo algo novo. Nada melhor do que eliminar um antigo trauma:\nO medo do vim, o poderoso e temido editor do Linux!\nSó existe uma maneira de dominar o Vim: usando! Então, desinstalei o Vscode e passei a usar o\nvim efetivamente para todas as tarefas.\nNessa aventura, acabei criando uma lista para\nconsulta rápida dos atalhos mais usados. Assim eu posso abrir o arquivo que estou editando em\numa janela do vim e minha lista de atalhos numa janela lateral (vertical split), onde posso\nconsultar rapidamente o comando que estou procurando, sem perder o foco no trabalho.\nSegue abaixo a lista de atalhos que uso efetivamente no vim. Se quiser, é só copiar e salvar em\nalgum arquivo.txt para consulta, assim como faço.\nFeliz 2020!\n## Comandos vim ### Entrada e saida (modo normal) :new arquivo ## abre segundo arquivo split horizontal' :edit arquivo\t## abre outro arquivo :vnew arquivo ## abre novo arquivo split vertical :split arquivo ## abre novo arquivo :q\t## sair do vim :q! ## forca saida do vim :w\t## salva arquivo :x\t## salva e sai (se modificado) :w novonome\t## salva como novo nome :saveas novon\t## salva cmoo novo nome e muda p/ novo arquivo :wq\t## salva arquivo e sai :10,20 w! novo\t## salva da linha 10 a 20 em novo arquivo :enew!\t## não salva e abre novo :Vex\t## Abre file explorer na vertical :e .\t## abre file explorer na janela atual vim .\t## abre o vim com file explorer '0\t## solicitar reabertura do ultimo arquivo aberto '1\t## solicitar reabertura do penultimo arquivo aberto :bp\t## vai para arquivo anterior :bn\t## vai para proximo arquivo :wn\t## salva e vai para proximo arquivo :shell\t## abre shell (exit para voltar :!\t## run external comando :terminal\t## abre shell numa janela ### buffer de arquivos badd\t## adiciona arquivo ao buffer bn\t## next file of buffer bp\t## arquivo anterior ls\t## lista arquivos do buffer b1\t## carrega arquivo 1 do buffer bdelete\t## apaga arquivo do buffer split #2\t## carrega arquivo 2 do buffer em janela horizontal vplit #2 ## carrega arquivo 2 do bufffer em janela vertical ### janelas ctrl wn\t## abre nova janela sobrepondo atual (:new) ctrl wq\t## fecha janela atual (:quit) ctrl wc\t## fecha janela atual ctrl ws\t## Divide janela em duas (:split) ctrl wo\t## Faz janela atual ser unica (:only) ctrl w w ## alterna entre janelas ctrl wj\t## desce uma janela ctrl wk\t## sobe uma janela crtl wr\t## rotaciona janelas ctrl w+\t## aumenta espaço da janela ctrl w-\t## diminui espaço da janela :hide\t## esconde a janela sem fechar buffer :wall\t## salva todas janelas abertas :qall\t## sai de todas janelas :res +5\t## aumenta janela horizonal 5 :resize 60\t## janela horizontal 60 :vertical resize 80 :vertical resize +5 ### abas tabnew file\t## abre arquivo em nova aba tabnext\t## avanca proxima aba tabprevios\t## retorna aba anterior ### Ações (modo normal) d\t## deletar dd\t## deletar linha i\t## inserir I ## inserir no inicio da linha atua a ## inserir apos caracter atual A\t## inserir no final da lina atual o\t## insert na linha abaixo (nova linha) O\t## insert na linha acima (nova linha) p\t## colar abaixo P\t## colar acima y\t## copiar yy\t## copiar linha x\t## recortar x\t## apagar uma letra xx\t## recortar linha u\t## desfazer (undo) di\t## deletar dentro yi\t## copiar dentro v\t## visual / seleção /\t## buscar (find) n proxima ocorrencia // ## repete ultima busca %\t## busca fechamento de parenteses ou chave :s\t## substituir (replace) :50\t## vai para linha 50 50gg\t## vai para linha 50 A\t## iniciar insercao no fim da linha I\t## inciar insercao no inicio da linha J\t## Remove break line da linha atual c/ anterior ZZ\t## sai do arquivo e salva ### Movimentos (modo normal) e\t## fim da palavra atual b\t## incio palavra anterior w\t## inicio proxima palavra hjkl\t## esquerda baixo cima direita $ ## fim da linha 0\t## inicio da linha G\t## fim do arquivo nG\t## pular para linha n )\t## avançar uma frase }\t## avançar um parágrafo gg\t## vai pra linha 1 do arquivo H\t## vai para primeiro caracter da tela M ## poe cursor no meio da tela L\t## vai para ultima linha da tela *\t## salta proxima ocorrencia da palavra ctrl f\t## page foward ctrl b\t## page back zt\t## cursor no topo da pagina zm\t## cursor no fim da pagina ### alteracoes (modo normal) g,\t## avança lista de alteraçoes g; ## retrocede lista de alterações u\t## desfaz ultima mudança :changes\t## ver lista de alterações :h changes\t## lista de alterações detalhadas UU\t## desfaz mudanças da linha editada ctrl -r ## refaz mudanças desfeitas undo undo ### comandos modo insert ctrl y ## copia caracter caracter linha acima ctrl e ## copia caracter caracter linha abaixo ctrl w ctrl f\t## abre arquivo sob cursor na janela atual Shift insert\t## inserir texto da area de transferencia ### modo visual v ## seleção de caracteres V\t## selecão de linhas inteiras ^V\t## seleção de blocos ### Marcas ma\t## cria marca a em modo normal 'a\t## move cursor até marca a d'a\t## delete ate a marca a y'a\t## copia ate a marca a ### Exemplos: d$\t## apaga até o final da linha d^\t## apaga até o inicio da linha dG\t## apagar até o final do arquivo dl\t## apagar uma letra D\t## apagar resto da linha d3j\t## deletar 3 linhas abaixo yw\t## copiar proxima palavra cursor no inicio yiW\t## copiar palavra (c/ caracteres especiais ) curso no meio 10j\t## avançar 10 linhas di}\t## apagar tudo dentro das chaves 2{\t## subir 2 paragrafos 5p ## colar selecao atual 5 vezes i\t## Editar onde o cursor apresentar \u0026quot;I can vim now\u0026quot; ayy\t## copia linha atual para registrador a ap\t## cola registrador a fx\t## vai ate proxima ocorrencia de x dfx\t## deleta ate proxima ocorrencia de x ctrl f\t## page foward ctrl b\t## page back gi\t## insert no ultimo ponto de edição gv\t## repete ultima selecao visual gf\t## abre arquivo sob o cursor :s:/foo/bar\t## substitui foo por bar na linha atual :1,10 s/foo/bar ## substitui foo por bar até a 10a linha :% s/foo/bar\t## substitui foo por bar no arquivo todo :1,$ s/foo/bar\t## substitui foo por bar no arquivo todo ### configuracoes set number\t## show line numbers set nonumber\t## ride line numbers set relativenumber ## set relative linenumber set norelativenumber ## unset relative linenumber ","description":"Para começar 2020 com o pé direito, resolvi aprender algo novo. Saiba porque escolhi aprender a utilizar efetivamente o Editor Vim e de quebra aprenda alguns atalhos de teclado interessantes.","id":29,"section":"posts","tags":["Linux","Vim"],"title":"Principais comandos do Editor Vim","uri":"https://alansantosmg.netlify.com/pt/posts/2020-01-05-dominando-vim/"},{"content":"Desde a versão 18.04, a Canonical mudou a forma como as interfaces de rede são configuradas no Ubuntu Server. Não devemos mais editar o arquivo /etc/networks/interfaces, como tem sido feito há anos, da forma tradicional. Ele foi substituído pelo netplan.\nO netplan utiliza um arquivo de configuração .yaml que precisa ser escrito usando identações com espaços em branco (se usar tabulações, não é processado pelo netplan). Outra questão importante é que a indentação precisa ser consistente para o arquivo ser processado.\nEmbora muitos estejam acostumados ao método antigo, o novo nada tem de difícil ou misterioso. Faremos um exemplo.\nAbra um terminal e vá para o diretório /etc/netplan usando o comando cd /etc/netplan.\nAntes de efetuar a configuração, é preciso saber qual interface de rede iremos configurar. Para saber quais interfaces temos disponíveis, podemos usar o comando ip addr.\nUma vez dentro do diretório digite o comando ls para verificar a existência do arquivo 50-cloud-init.yaml. Se no mesmo diretório não existir o arquivo 01-netcfg.yaml, devemos criá-lo com o comando sudo touch 01-netcfg.yaml\nUma vez criado o arquivo, devemos editá-lo. sudo nano 01-netcfg.yaml.\nAntes de mostrar como o arquivo deve ser preenchido, algumas observações importantes:\n os parâmetros são configurados no estilo chave: valor; a configuração de rede e máscara ficam em uma linha só; como se trata de ip estático dhcp4 deve ser no; onde há mais de um parâmetro do uso de [] como delimitador é obrigatório; a identação dos parâmetros deve ser feita com espaços em branco e segue uma lógica. Ou seja: eu tenho uma rede e dentro da rede eu tenho um conjunto de interaces do tipo ethernet e dentro deste conjunto eu tenho uma interface de rede que tem suas configurações e nas configurações eu ainda tenho servidores DNS (nameservers) que tem seus endereços.  Se formos configurar por exemplo uma interface de rede nomeada enp0s3 com endereço ip estático: 192.168.56.4, máscara de rede 255.255.255.0, gateway 192.168.56.1 e os servidores DNS do Google 8.8.8.8 e 8.8.4.4, o arquivo deve ficar como no exemplo abaixo:\n1 2 3 4 5 6 7 8 9 10  network:version:2renderer:networkdethernets:enp0s3:dhcp4:noaddresses:[192.168.56.4/24]gateway4:192.168.56.1nameservers:addresses:[8.8.4.4,8.8.8.8]  Após configurar o arquivo, utilizando seus parâmetros, salve-o e a seguir execute o comando sudo netplan apply, no terminal.\nSe o arquivo estiver bem formatado e com parâmetros corretos, ele irá reconfigurar sua interface de rede e tudo estará ok. Se algum parâmetro estiver incorreto ou houver inconsistência na identação, o netplan retornará uma mensagem de erro.\nErros comuns:\n arquivo identado com tabulações ao invés de espaços em branco; esquecer os [] nos locais apropriados; usar parametros no singular como adress ao invés de adresses, ethernet no lugar de ethernets, e nameserver no lugar de nameservers. esquecer dos : entre chave e valor; não colocar a mascara no lugar a propriado. Para 255.255.255.0 deve ser 24. não digitar o nome correto da interface de rede no arquivo.  Outra maneira de saber ser o netplan funcionou direitinho e se as configurações foram aplicadas é através do comando sudo netplan --debug apply.\nPara configurar mais de uma interface de rede, é possível através da criação de outros arquivos, como 02-netcfg.yaml e assim por diante.\nÉ isso. Espero que tenham gostado.\n","description":"Onde está o ifconfig? iwConfig? A Canonical mudou a forma como as intefaces de redes são configuradas no Ubuntu Server. Montei um passo-a-passo para facilitar a vida.","id":31,"section":"posts","tags":["Linux"],"title":"Configurando ip estático no Ubuntu Server","uri":"https://alansantosmg.netlify.com/pt/posts/2019-10-7-ip-linux-ubuntu-server/"},{"content":"Uma das coisas que torna o VSCode mais do que um simples editor, é o fato dele já vir com uma funcionalidade que permite fazer o debug de aplicações. Então, porque não usá-lo ao invés ficar debugando a aplicação dentro do Google Chrome?\nEsse post, foi escrito tendo em mente o desenvolvedor iniciante que muitas vezes não consegue configurar corretamente o ambiente por não ter exatamente a noção sobre o ponto de partida para realizar as configurações para esta tarefa e que acaba se frustrando, achando que o debugger do VScode não tem muita utilidade.\nEntão, vamos à obra, pois tudo é bem mais simples do que pode aparentar\u0026hellip;\nPara realizar nossa tarefa, precisaremos instalar 2 extensões no VScode. Na barra lateral esquerda do seu VScode, clique no botão extensões ou então use o atalho de teclado Ctrl + shift + x. e na barra de pesquisa do Marketplace busque e instale as extensões:\n live server; Debugger for Chrome;  Para facilitar a vida, normalmente crio um Workspace de dentro dele crio diversos projetos diferentes (desde que a configuração de ambiente seja semelhante). Assim, poupo algum tempo, ao invés ter que ficar alternando entre Workspaces para cada projeto.\nSe você pretende trabalhar dessa forma, então para que possamos testar o funcionamento do debugger, crie uma pasta dentro do seu workspace chamada projeto-teste.\nNessa pasta, crie 2 arquivos: Index.html e principal.js;\nO conteúdo deles será:\nindex.html:\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026#34;principal.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   principal.js:\n1 2 3 4 5 6 7 8 9  var teste = { meutexto: \u0026#34;teste\u0026#34;, chamateste: function(){ console.log(\u0026#34;Isso é um: \u0026#34; + this.meutexto) } }; teste.chamateste();   Obviamente o index.html não mostra nada na tela, justamente para vermos o que acontece por trás (mostrar mensagem) no console do debugger. O arquivo principal.js será responsável por criar um objeto, que possui um método para mostrar uma mensagem no console. Após a declaração do objeto, ele chama o método correspondente, que deverá \u0026ldquo;imprimir\u0026rdquo; a mensagem no console.\nApós ter instalado a extensão do Live server, será possível ver na barra inferior do VScode o ícone e a palavra \u0026ldquo;Go live\u0026rdquo;. Ao clicar neles, é carregado um servidor web em sua máquina local. Por default, esse servidor usa a porta 5500.\nPara saber se está funcionando corretamente,uma vez que você esteja na pasta projeto-teste, basta clicar no ícone, que ele carregará o live server, e buscará pelo arquivo index.html e o abrirá no navegador padrão, como se a pasta do projeto fosse o diretório raiz do servidor. Ao fazer isso, basta dar um f12 para abrir as ferramentas de desenvolvimento do chrome e verificar na guia console que a mensagem \u0026ldquo;Isso é um teste\u0026rdquo; apareceu (ou seja, a página index.html, chamou o script principal.js e o executou ao ser carregada).\nSabendo que o live server está funcionando ok. Agora vamos à configuração do Debugger for Chrome.\nCom a extensão instalada, clique no menu Debug e add configurations e escolha como enviroment o Chrome.\nSerá aberto o arquivo de configuração. Pelo fato do projeto não estar hospedado na raiz do Workspace e sim numa pasta dentro deste, será necessário introduzir uma pequena modificação no arquivo.\nEste deve ser o original:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;chrome\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Launch Chrome against localhost\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:8080\u0026#34;, \u0026#34;webRoot\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; } ] }   Lembra que a porta do live server é a 5500? Então, troque a 8080 por esta e acrescente uma linha, deixando o arquivo como abaixo:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;chrome\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Launch Chrome against localhost\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:5500\u0026#34;, \u0026#34;webRoot\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;${workspaceFolder}/index.html\u0026#34; } ] }   Outras variações possíveis:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;chrome\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Launch Chrome against localhost\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:5500\u0026#34;, \u0026#34;webRoot\u0026#34;: \u0026#34;${workspaceFolder}/pasta-do-seu-projeto\u0026#34; } ] }   Outra variação:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;chrome\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Launch Chrome against localhost\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;http://localhost:5500\u0026#34;, \u0026#34;webRoot\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;${workspaceFolder}/pasta-do-seu-projeto/index.html\u0026#34; } ] }   Escolher uma destas configurações básicas e mandar salvar o arquivo de configuração, deve ser o suficiente para fazer o debugger do Chrome rodar via Vscode.\nPara saber se a configuração funcionou é simples. Após salvar o arquivo, execute o debugger, clicando em F5 quando estiver na pasta do projeto. Ao fazer o live server será iniciado na porta 5500. O debugger estará escutando essa porta (conforme configuramos) e na saída do terminal \u0026ldquo;debug console\u0026rdquo; deverá aparecer a mensagem gerada pela chamada do método que configuramos no objeto criado: \u0026ldquo;Isso é um teste\u0026rdquo;.\nA partir daí basta a começar a desenvolver e utilizar o Debugger. Sua utilização será assunto de outro post.\nEspero que os modelos de arquivo de configuração do Debugger for Chrome, sirvam como passo inicial sobre como proceder para o uso do debugger de scripts JS no Vscode.\nSe você gostou desse post, ou acha que precisa acrescentar, corrigir ou incluir algo, fique à vontade para deixar seus comentários. Contribuições são muito bem-vindas.\nAté a próxima.\n","description":"Nada mais chato do que ter que ficar saindo do VSCode para debugar o código javascript no navegador. Porém descobri um jeito de parametrizar o debugger do VScode para realizar essa tarefa.","id":32,"section":"posts","tags":["Javascript","Vscode"],"title":"Debugando Javascript Apps com Vscode","uri":"https://alansantosmg.netlify.com/pt/posts/2019-10-01-vscode-debugger-js/"},{"content":"Hoje vamos falar do assunto mais importante quando falamos em liderança: COMUNICAÇÃO. De todas as habilidades certamente esta é a mais importante que um lider deve dominar. Como chegar ao outro em um mundo pautado pelos conflitos e pela aspereza geral nas relações?\nMarshall Rosenberg desenvolveu nos anos 60 uma técnica de mediação que consegue aproximar as partes envolvidas em um conflito, qualquer que seja, e faz vir à tona as reais motivações e descontentamentos dessas pessoas. Anos mais tarde ele publicou o livro Comunicação não violenta - Técnica para aperfeiçoar relacionamentos pessoais e profissionais, que já vendeu milhões de cópias pelo mundo.\nEm 1984, Marshall fundou uma ONG, dedicada à promover a CNv pelo mundo, mostrando que a técnica pode ser utilizada não apenas em conflitos armados, mas também naqueles derivados do relacionamento interpessoal e também das negociações profissionais.\nEm 2014, Satya Nadella, ao assumir a liderança da Microsoft, distribuiu cópias da obra entre seus principais executivos para transformar a empresa, vista como hostil, em um ambiente de empatia e solidariedade.\nA CNV é um processo 2 que consiste de 2 momentos:\n Expressar-se honestamente; Receber com empatia.  Cada um desses dois momentos utiliza os 4 componentes (passos) da CNV que devem ser seguidos necessariamente nessa ordem:\n Observação: Observar as ações concretas do outro sem avaliar/julgar/comparar; Sentimento: Avaliar qual sentimento despertam em nós; Necessidade: Entender a qual necessidade interior o sentimento gerado se relaciona; Pedido: fazer um pedido para atender à necessidade interior observada.  Por fim, o processo leva em conta 2 premissas essenciais para o sucesso da aplicação da CNV:\n Evitar a comunicação que bloqueia a compaixão:\n  Classificar e julgar as pessoas estimula a violência. Comparar é uma forma de julgamento.   Devemos assumir a responsabilidade:\n  \u0026ldquo;O que os outros fazem pode ser o estímulo para nossos sentimentos, mas não a causa\u0026rdquo;.  Penso que esse livro deveria ser leitura obrigatória em toda escola, para ajudar a fomentar uma transformação positiva nas relações humanas e criar uma base para um mundo no mínimo mais honesto e com mais compaixão.\nE você? Já leu o livro? O que pensa?\n","description":"Resenha - Um livro sobre técnicas de relacionamentos pessoais e profissionais para se comunicar melhor em um mundo pautado por conflitos.","id":33,"section":"posts","tags":["Livros"],"title":"Comunicação não violenta","uri":"https://alansantosmg.netlify.com/pt/posts/2019-09-26-comunicacao-nv/"},{"content":"Na última semana, concluí todas as lições de Javascript do Watch and Code, desenvolvido pelo engenheiro de software Gordon Zhu, ex-funcionário do Google, que resolveu montar seu próprio curso de programação.\nAo longo de 2019, tenho me aventurado no aprendizado de Javascript e nessa, já li alguns livros, assisti a videos no youtube e cheguei a fazer alguns cursos na Alura. Embora passado por vários conteúdos de excelência, nenhum deles se compara ao curtíssimo curso do Zhu.\nO Watch and Code curso em si é pequeno, cada video tem entre 5 a 10 minutos. Mas, não se deixe enganar. Zhu é um programador exímio e um incrível instrutor, capaz de mostrar de forma prática como construir uma aplicação começando do jeito certo e principalmente, mais rápido e com menor custo de manutenção. Com poucas semanas, aprendi muito mais do que em qualquer outra fonte.\nDurante o processo, além de aprender sobre a estruturas do Javascript, Zhu nos conduz pelo caminho de pensar como um programador, mostrando:\n como escrever requisitos de forma clara, sem rodeios. como usar a própria web como plataforma de desenvolvimento; como usar o debugger da forma correta; como ir testando a aplicação a cada feature desenvolvida; como dividir um problema em partes bem pequenas, gerenciáveis. como se desenvolve na prática a tal da arquitetura emergente.  E o mais importante: compreendi um conceito central sobre o desenvolvimento de softwares:\nProgramar é manipular listas!\nMuitas vezes, nem nos damos conta, mas é isso mesmo: programas basicamente manipulam dados em listas. Eles inserem dados em listas, geram informações a partir de processamento (manipulação) dos dados de uma ou mais listas e guardam o resultado em listas! Quer ver só?\n Um gerenciador de tarefas é uma lista de tarefas; Um chat é uma lista de diálogos encadeados; Uma rede social, listas de amigos, listas de feeds; Um feed é uma lista de postagens; Um microblog é uma lista usuários, cada qual com uma ou mais listas de mensagens curtas; Um erp é um conjunto listas de nf\u0026rsquo;s, ordens de compra, dados contábeis; Um canal de streaming é uma ou várias listas de músicas e videos;  Então, os príncipios são os mesmos, seja para criação de um app simples de lista de tarefas, seja para criação de uma aplicação sofisticada em qualquer área. As implicações sobre esse entendimento são enormes, pois trata-se de uma forma mais pragmática de se encarar o desenvolvimento.\nSe você quer aprender Javascript no estilo change-game não deixe de aproveitar. Faça o Watch and Code do Gordon Zhu. Você vai aprender sobre as principais estruturas do Javascript, e ainda vai se divertir bastante, vendo sua aplicação crescer, como um filho que vai amadurecendo pouco a pouco.\nRecomendo!\nhttps://watchandcode.com/p/practical-javascript\n","description":"Não sou muito de sair por aí fazendo propaganda, mas encontrei um curso de javascript básico que mostra como construir uma aplicação do zero, de forma bem eficaz e escalável.","id":34,"section":"posts","tags":["Javascript"],"title":"Excelente curso de Javascript Free!","uri":"https://alansantosmg.netlify.com/pt/posts/2019-09-25-watchandcode/"},{"content":"A liguagem de marcação Markdown foi criada para facilitar a publicação de textos na web em aplicativos como Slack, Github, e outros. Sua sintaxe permite vermos o documento num formato que é semelhante ao resultado final de publicação ainda em tempo de edição (texto puro). Ela também serve de conversor para html, sendo mais fácil de aprender e utilizar. Os posts deste blog por exemplo são escritos em Markdown.\nPara trabalhar com o Markdown no editor Visual Studio Code podemos instalar a extensão Markdown All in One, pois a mesma reúne diversas funcionalidades interessantes, existentes em outras extensões, entre elas:\n Fornece atalhos para formatação rápida do documento em MD. Converte arquivos MD em HTML. Ajuda a criar sumário automaticamente para arquivos MD. Fornece preview do arquivo MD dentro do próprio VScode. Permite a criação automática de sumário.  As funcionalidades da extensão estão presentes na barra de comando do VSCode e podem ser facilmente acessadas como no exemplo abaixo.\nCriação automática de sumário (Table of Contents) A criação automática de sumário (TOC) funciona da seguinte, maneira. Basta criar normalmente o documento, com suas seções (títulos e sub-titulos) seguindo a sintaxe Markdown. Após criar seu documento com extensão .MD no Vscode, basta fazer o seguinte:\n Posicione o cursor no local onde ficará o sumário. tecle Ctrl + Shift + P Digite na janela de comando: Markdown All In one: Create table of contents O sumário deverá aparecer no lugar onde foi posicionado o cursor. Se quiser que algum item seja omitido do sumário, colocar na frente dele: \u0026lt;!-- omit in toc --\u0026gt; Salve o arquivo.  Para atualizar o sumário repetir o procedimento acima, porém usando o comando:\nMarkdown All in one: update table of content\n","description":"Existe uma extensão do VSCode que facilita muito a vida na hora de escrever e manipular arquivos na linguagem Markdown. Todo bom programador é também preguiçoso. Quanto menos trabalho tiver para fazer algo, melhor.","id":35,"section":"posts","tags":["VsCode","Linux"],"title":"Markdown no Vscode","uri":"https://alansantosmg.netlify.com/pt/posts/2019-09-25-mardown-toc/"},{"content":"Em algumas instalações o editor Visual Studio Code pode apresentar um comportamento estranho: você clica em um arquivo no explorer (lado esquerdo) e o mesmo é aberto em uma aba. Você clica em outro arquivo e ao invés de abrir em uma nova aba, ele abre o segundo arquivo na mesma aba do anterior.\nEsse comportamento pode ser modificado, alterando-se um parâmetro nas configurações do Vscode.\n No Vscode, pressione as teclas ctrl + , ou clique na engrenagem na parte inferior da barra lateral esquerda para abrir as configurações do editor. A seguir, nos settings, escolha Workbench e editor management. Desmarque a opção Enable Preview.  Pronto: Agora, ao clicar nos arquivos no explorer do VScode, cada um será aberto em uma aba separada.\nBônus:\nAproveite que já está no editor management e altere a opção Tab sizing de default para srink. Dessa forma, as abas tentarão ocupar o menor espaço posssível à medida em que forem sendo abertas, aproveitando melhor o espaço.\n","description":"Me deparei com uma situação inusitada. Em algumas situações o Vscode estava abrindo novos arquivos na mesma aba do arquivo anterior. Existe uma forma de mudar esse comportamento.","id":36,"section":"posts","tags":["Vscode"],"title":"Vscode só abre uma aba","uri":"https://alansantosmg.netlify.com/pt/posts/2019-09-25-vscode-abas-nao-abrem/"},{"content":"O cache da loja de aplicativos do Ubuntu pode se corromper levando a duas situações: ou a loja não carrega ou a lista de aplicativos é baixada cada vez que o software é aberto (não faz cache). Para corrigir é preciso apagar o cache. Abra um terminal e digite os comandos abaixo:\n killall gnome-software sudo rm -rf ~/.local/share/gnome-software  Depois de executar o comando, certifique-se de que está conecetado na internet e abra novamente a loja para baixar a lista de apps e criar um novo cache.\n","description":"Saiba o que fazer quando o a loja de aplicativos do Ubuntu não estiver sendo carregada corretamente ao abrir a aplicação.","id":37,"section":"posts","tags":["Linux"],"title":"Erro na loja de Apps do Ubuntu","uri":"https://alansantosmg.netlify.com/pt/posts/2019-07-07-erro-loja-ubuntu/"},{"content":"O .gitignore é um arquivo oculto que deve ficar dentro da raiz do seu repositório git. Ele é usado para fazer o git ignorar determinados tipos de arquivo durante as operações de commit. Ele existe justamente para que seu branch de produção possa ficar limpo de arquivos desnecessários. É possível criar um gitignore para cada repo, porém essa operação pode ser automatizada via shell script. Crie um novo arquivo, com o nome de gitignore-create.sh, cole nele o código abaixo, salve e execute-o nos diretórios de seus repositórios git. O mais interessante é que esses comandos podem ser incluídos em um shell script mais completo, feito para fazer todo o setup de seu projeto.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  cd ./.git touch gitignore echo \u0026#34;*.log\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;*_pycache_\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;*.[oa]\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;*~\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;!lib.a\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;*.pyc\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;.vscode\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;*.vscode\u0026#34; \u0026gt;\u0026gt; gitignore echo \u0026#34;settings.json\u0026#34; \u0026gt;\u0026gt; gitignore echo sleep 2 clear echo \u0026#34;Arquivo gitignore criado em ./.git\u0026#34; echo \u0026#34;Não monitorando (ignorando): \u0026#34; sleep 2 echo \u0026#34;---------------\u0026#34; cat gitignore echo \u0026#34;---------------\u0026#34; sleep 10 echo   ","description":"Como tenho preguiça de ficar copiando o .gitignore de um lado para outro, resolvi fazer um script shell para tomar conta desse trabalho.","id":38,"section":"posts","tags":["Git"],"title":"Script para criar arquivo gitignore","uri":"https://alansantosmg.netlify.com/pt/posts/2019-07-03-gitignore-script/"},{"content":"Quer saber qual a versão atual do Kernel de sua máquina? Listar os ips das interfaces de rede? Muito bem, segue abaixo uma lista de atalhos úteis para quem usa ou administra um servidor/desktop Linux.\nComandos de terminal úteis    Comando Função     ss -a Listar portas abertas no server.   uname -a Mostrar versão do kernel do sistema.   uname - r Mostrar versão do kernel sistema.   ip addr Listar interfaces de rede.    Este post será atualizado de tempos em tempos com novos atalhos interessantes.\n","description":"","id":39,"section":"posts","tags":["Linux"],"title":"Comandos úteis no terminal do Linux","uri":"https://alansantosmg.netlify.com/pt/posts/2019-04-03-atalhos-term-linux/"},{"content":"Hoje uma usuária do Linkedin, postou uma dúvida sobre como esvaziar sua caixa de entrada de mensagens. O Linkedin permite apagar manualmente cada mensagem, mas o que fazer se o usuário possuir algo como 1.000 mensagens?\nPara minha surpresa, após consultar a ajuda do próprio Linkedin, constatei que não existe uma opção para zerar o inbox. Cheguei a responder à usuária, que não era possível executar tal operação, mas fiquei muito intrigado com o problema.\nDepois de algumas pesquisas e vários testes , encontrei uma solução funcional.\nVamos à receita:\nVocê deve estar utilizando o Google Chrome para executar a operação.\nUse Control-C para copiar o seguinte código para memória do computador:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  (function() { setInterval(() =\u0026gt; { let deleted = false; $(\u0026#39;artdeco-dropdown-item\u0026#39;).each((i, elem) =\u0026gt; { let txt = $(elem) .text() .trim(); if (txt === \u0026#39;Delete\u0026#39;) { deleted = true; $(elem).click(); } }); if (deleted) { setTimeout(() =\u0026gt; $(\u0026#39;.js-msg-delete\u0026#39;).click(), 500); } else { $(\u0026#39;.msg-conversation-card__list-action-icon\u0026#39;) .eq(1) .click(); } }, 1000); })();   ","description":"","id":40,"section":"posts","tags":["Javascript"],"title":"Deletar mensagens no Linkedin em lote","uri":"https://alansantosmg.netlify.com/pt/posts/2019-01-05-delete-linkedin-inbox/"},{"content":"Olá, se você é como eu, chegado a bizarrices como administrar o Azure a partir do Linux e não de um servidor ou client Windows, este artigo é para você.\nO serviço de nuvem da Microsoft (Azure), pode ser comandado a partir de diversas interfaces: através do portal do Azure, disponível na web, através do de um console PowerShell, disponível em máquinas windows ainda através da Azure CLI (Client Line Interface) que pode ser instalada em máquinas Linux e Macs.\nNeste artigo, mostrarei como instalar a CLI do Azure em distribuições Linux que utilizam o gerenciador de pacotes APT (baseadas em Debian), como Ubuntu, Mint, entre outras.\nO procedimento abaixo foi testado no Debian 9 e deve funcionar em outras distros debian-like.\nA instalação não funcionou usando a documentação oficial da Microsoft, mas não se preocupe:\nLançando mão de um pequeno macete, tudo correrá como esperado!\nEntão, mãos à obra:\nPara começar, vamos incluir a localização do repositório do pacote da CLI do Azure, que está hospedada na Microsoft.\nAbra um Shell terminal, copie e cole as linhas abaixo:\n1 2 3 4 5  sudo apt-get install apt-transport-https lsb-release software-properties-common -y AZ_REPO=$(lsb_release -cs) echo \u0026#34;deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPOmain\u0026#34; | \\  sudo tee /etc/apt/sources.list.d/azure-cli.list   A seguir, vamos instalar a chave pública do repositório:\n1 2 3 4 5  sudo apt-key --keyring /etc/apt/trusted.gpg.d/Microsoft.gpg adv \\  --keyserver packages.microsoft.com \\  --recv-keys BC528686B50D79E339D3721CEB3E94ADBE1229CF   Na documentação oficial, somos orientados a fazer um apt-get update. Porém, ao realizar o comando seguinte de instalação do pacote, é possível se deparar com a mensagem de pacote não encontrado.\nAqui vai o macete que irá lhe poupar tempo e neurônios: além de fazer um apt update também é preciso fazer um apt-upgrade, então o terceiro passo ficaria assim:\nsudo apt-get update \u0026amp;\u0026amp; apt-get upgrade\nAgora sim o apt conseguirá baixar e instalar o pacote da CLI do Azure. Para fazer isso, digite:\nsudo apt-get install azure-cli\nPara terminar, experimente invocar a CLI e veja que a saída do comando deverá ser uma lista de parâmetros a serem usados com a CLI. No shell bash do seu terminal, digite:\naz\nSaída do comando:\n","description":"","id":41,"section":"posts","tags":["Linux"],"title":"Instalando o Azure Cli no Linux","uri":"https://alansantosmg.netlify.com/pt/posts/2019-01-02-cli-azure-linux/"},{"content":"Este artigo tem por objetivo mostrar que é possível criar um ambiente de desenvolvimento completo para Python sem a necessidade de instalar IDEs pesadas como Pycharm, Eclipse entre outras e sem abrir mão da \u0026ldquo;usabilidade\u0026rdquo; para o usuário final.\nCaso encontre algum erro neste artigo, gentileza encaminhar por email para alansantosmg@gmail.com para correção.\nPara quem é este artigo Este artigo é voltado para todos (programadores ou não) que pretendem utilizar a linguagem Python e desejam ter um ambiente de desenvolvimento completo, limpo, leve e amigável no qual se tem o controle completo sem depender de ferramentas tais como \u0026ldquo;Anaconda\u0026rdquo; que acabam impedindo o aprendizado ao criar uma camada de abstração sobre as atividades de configuração.\nSobre outros editores para desenvolvimento em Python Alguns puristas preferem desenvolver em Python utilizando o VI Editor, que possui muitas vantagens. Porém, para iniciantes ou para quem tem um pouco mais de pressa, o VI não é amigável e pode se tornar um empecilho, pois além de aprender a programar o iniciante ainda precisa aprender a utilizar e customizar o VI, levando muitas horas para ser produtivo.\nExistem editores interessantes que estão entre o espartano VI e as pesadas e complexas IDEs como Pycharm, Eclipse etc, que embora sejam completas de fábrica, também tem uma curva de aprendizado.\nComo meio termo existem editores como o Atom, Sublime Text e o VSCode.\nO Atom é editor de texto/código multiplataforma muito utilizado para desenvolvimento, principalmente para Web, mas alguns desenvolvedores consideram lento para iniciar e com alto consumo de memória se comparado a outros editores de sua categoria.\nJá o Sublime Text que também é multiplataforma, embora excelente em termos de instalação, usabilidade, flexibilidade, tem a desvantagem de ser pago para uso comercial. Obviamente é possível usar sem pagar, mas isso não seria interessante.\nSobre o VSCode Editor O VSCode que é um editor multiplataforma criado e mantido pela Microsoft. Ele possui licença free tanto para uso comercial quanto privado. Roda em Linux, MacOS e Windows e possui instaladores para as 3 plataformas.\nTrata-se de um projeto mais novo que o Atom e Sublime Text, contando com uma boa comunidade de utilizadores, um grande número de extensões e vem sendo adotado por muitos desenvolvedores Python e não Python.\nO VSCode vem com suporte nativo a GIT com detecção automática de repositórios, Outline, Code Snippets, terminal integrado, file Explorer, file Search e interface para debug e integração com ferramentas de teste.\nAlém de ser totalmente customizável, o VSCode possui opções para edição avançada de código, possibilitando edição em lote. Ele suporta sintax highlighting e identation para a maior parte das linguagens como Python, C#, JavaScript, Java, SQL, Objective C, etc e opção para encoding, além de possuir uma interface bastante amigável.\nPara saber mais sobre o VSCode: https://code.visualstudio.com/docs/supporting/faq\nAntes de começar Não saia baixando o VSCode antes de iniciar a leitura do artigo. Embora o VSCode já venha no Marketplace de algumas distribuições e no próprio site seja possível baixar um pacote .deb de sua distribuição, esta pode não ser a melhor opção de instalação.\nNos dias atuais, um programador pode trabalhar em diferentes máquinas durante o seu dia (no computador do trabalho, da faculdade, de casa, etc). Pode ser muito chato ter que configurar e manter sincronizado um ambiente de desenvolvimento em cada um desses locais.\nPor isso, este artigo foca na configuração de um ambiente portável, que possíbilite ao programador realizar o upload para o Github, google drive, OneDrive ou para um Pen-drive, ou seja, levar seu ambiente de desenvolvimento para onde ele quiser. No artigo veremos como isso é possível.\nCaso encontre algum erro neste artigo, gentileza encaminhar por email para alansantosmg@gmail.com para que o mesmo possa ser corrigido.\nRequisitos:   Estar utilizando o Python 3.x, ter acesso à internet no Sistema onde será feita instalação.\n  Estar utilizando distribuições baseadas no Debian tais como:\n Linux Mint Ubuntu Debian    Instalação o Python 3 e seu gerenciador de pacotes Se o python 3 não estiver instalado:\nsudo apt-get install python3 sudo apt-get install python3-pip  Todos os processos abaixo terão como base o diretório home do utilizador.\nInstalação de Ferramenta de controle de versão Caso utilize o GIT para controle de versão criar o diretório git dentro do diretório home. Caso não vá utilizar ignorar esse passo.\nsudo apt-get install git -y mkdir ~/git  Ambientes virtuais (Virtual environments) Um ambiente virtual consiste em um diretório onde estão localizados o intepretador python, bibliotecas e arquivos necessários para rodar a aplicação.\nImagine que sua aplicação precisa utilizar bibliotecas que deverão ser baixadas localmente. E se você tiver 10 aplicações cada uma com conjunto de bibliotecas diferentes? Logo, a instalação global do python de sua máquina ficará cheia de bibliotecas.\nSe você não quiser mais ter a aplicação, terá que manualmente desinstalar as bibliotecas. Além do mais, se precisar realizar o deploy da aplicação em outro ambiente, precisará saber quais bibliotecas e qual versão do interpretador python copiar.\nPara resolver esse problema é possível criar ambientes virtuais.\nUm ambiente virtual nada mais é do que um diretório que contém um conjunto de bibliotecas que será usado por um conjunto de aplicações (ou por uma aplicação só). Ele fica separado do seu ambiente global.\nLogo, quando precisar realizar o deploy da aplicação, bastará levar junto esse ambiente e não tudo que está configurado em seu ambiente global.\nQuando for desenvolver uma aplicação, basta indicar em qual virtual environment está trabalhando (ou seja qual interpretador e bibliotecas aquela aplicação estará usando).\nFelizmente para Linux existem várias ferramentas que automatizam a criação de ambientes virtuais. Para Python3 a ferramenta padrão é o venv.\nInstalando ferramenta venvs: Para instalar o venv:\nsudo apt-get install python3-venv -y  Uma dúvida que os iniciantes geralmente tem ao criar venvs:\nNa criação de um venv, este deve ficar dentro da mesma pasta da aplicação que está sendo desenvolvida?\nA resposta é NÃO!\nNão é interessante que um venv fique dentro da pasta da aplicação pelos seguintes motivos:\n Se ele estiver fora, várias aplicações podem usar um mesmo venv. Ou seja, você só criará um venv novo se ele tiver mesmo que ser diferente de algum existente. Se precisar testar fazer testes com ambientes diferentes basta ativar o venv a ser usado, sem necessidade de cópias.  Definindo um local para armazenar os ambientes virtuais. Afim de evitar fazer alterações desnecessárias nos venvs, o melhor é criá-lo como uma pasta escondida dentro do diretório home. Para criar a pasta:\nmkdir ~/.venvs  Criando um virtual environment. No exemplo o nome dele será venv_01 e será criado dentro da pasta .venvs\npython3 -m venv ~/.venvs/venv_01  Ativando o venv para instalar algumas ferramentas importantes no desenvolvimento: cd ~/.venvs/venv01/bin source ~/.venvs/venv01/bin/activate  Após a ativação o prompt do shell irá mudar indicando que você está usando aquele ambiente python.\nInstalação de Ferramentas para desenvolvimento atualizas com VScode Editor. Para facilitar a vida do desenvolvedor, o Python dispõe de ferramentas de de verificação de código e de teste de aplicações. Elas já podem estar instaladas no diretório global, mas por questão de padronização e para facilitar a vida do programador, é melhor incluí-las no venv, assim caso esteja sendo utilizado o VSCode como editor, o mesmo reconhecerá automaticamente essas ferramentas quando estiver usando o venv. Dentro do diretório bin do ambiente ativado entre com os comandos:\npip3 install pylint pip3 install pytest pip3 install --upgrade pip setuptools wheel pip3 list  Criando um arquivo requirements.txt O arquivo requirements.txt pode ser criado dentro do ambiente. Ele é útil caso precise refazer o ambiente em outro local. Ele é usado junto com o pip para baixar os pacotes de módulos (bibliotecas) que sua aplicação poderá estar utilizando.\nPara criar um requirements.txt inicial, dentro do diretório bin do ambiente ativado entre com o comando:\npip3 freeze \u0026gt; ~/.venvs/venv_01/bin/requirements.txt  É interessante rodar esse comando depois que aplicação estiver finalizada ou sempre que forem adicionadas ou excluídas bibliotecas.\nInstalação do Editor VSCode (Visual Studio Code) Antes de iniciar a instalação um lembrete: ao contrário do Sublime, o Vscode é livre. Você não precisa pagar por uma licença para utilizá-lo. Ele funciona perfeitamente no Linux, pois foi desenvolvido com o framework Electron.\nEfetuar download Vscode versão stable para linux compactado em .tar.gz https://code.visualstudio.com/docs/?dv=linux64\nObs: Tem que ser esse formato, pois a instalação será da versão portável (aquela que o usuário pode levar para qualquer lugar). Não instale a versão .deb.\nDescompactar o arquivo baixado: tar -xzvf code*  ou\ntar -xzvf code-stable-1539735949.tar.gz  Obs: o nome do pacote pode variar dependendo da versão baixada.\nMovendo o VSCode para o diretório home Após descompactação, mova o diretório criado para localização que quiser.\nSupondo que o pacote foi baixado e descompatado no diretório ~/Downloads, para movê-lo para o seu diretório home, utilize o comando:\nmv ~/Donwloads/VSCode-linux-x64 ~/  ou\nmv /home/nomedomeuhome/Downloads/VSCode-linux-x64 /home/nomedomeuhome/VSCode-linux-x64  Configurando armazenamento das preferências do Editor Criar o diretório data dentro do diretório do vscode. Esse diretório será usado para guardar as preferencias setadas no Editor e extensões instaladas. Assim, o seu ambiente de trabalho poderá ser restaurado em qualquer máquina posteriormente. Se o Vscode houver sido movido para o home:\ncd ~/VSCode-linux-x64 mkdir data  Isso permitirá que as preferências e extensões do Editor sejam salvas necesse diretório.\nCaso precise você pode mover o diretório do VSCode inteiro para um pendrive ou para a nuvem ou então apenas mover o diretório data para algum outro local e depois copiá-lo para dentro de um diretório descompactado do VSCode.\nAtualização de Versão do VSCode portável Se sair uma nova versão do VSCode a melhor forma de migrar é descompactar essa versão em um novo diretório e mover o subdiretório data para da pasta da nova versão do VSCode.\nConfigurando o VSCode para trabalhar com Python. Após ter criado o diretório Data, dentro da pasta do VSCode, vamos iniciar o editor. Para isso, dentro da pasta do Vscode execute:\n./code  Clicar em Extensions na barra lateral esquerda. Buscar e instalar as extensões listadas abaixo. Git e docker somente para quem pretende utilizar no desenvolvimento. A Extensão Python é mandatória:\n Python Git Merger Git History vscode-icons docker  Configurando VSCode para trabalhar com venv Após criar o diretório .venvs e criar ao menos um venv, abrir o vscode ir em Settings e na caixa de busca procurar por python.venvPath\nNa caixa de texto da variável usar o seguinte path:\n~./venvs  Reiniciar o vscode.\nSelecionando um venv para utilizar Abra ou crie um arquivo.py no VSCode.\nNa barra de status do VScode, clicar sobre a palavra Python e escolha na caixa que se abrirá o venv que deseja utilizar. Por padrão, além do ambiente global do sistema operacional, serão listados todos os venvs abaixo de ~/.venvs, já que o path para busca automática foi setado no passo anterior.\nBasta escolher qual venv quer utilizar que o ambiente será ativado automaticamente com todas suas bibliotecas.\nComo no venv instalamos o pytest e pylint, o VSCode reconhecerá automaticamente essas ferramentas quando o ambiente estiver sendo utilizado. Não é preciso fazer ajustes no arquivo Settings.\nNote que o VSCode não ativa o venv nos terminais externos que não estão sob a sessão do VSCode. Ele só faz isso para os terminais internos.\nPara ativar o venv fora da sessão do vscode, caso seja necessário, basta usar o procedimento normal de ativação do venv dependendo do tipo de ferramenta de virtual environment que estiver utilizando.\nConfigurando VSCode para encontrar repositórios GIT locais: Executar os passos abaixo somente se o VSCode não encontrar automaticamente os repositórios GIT. Por padrão o VSCode consegue detectar o repositório Git apenas abrindo a pasta que contém os repositórios. Caso ele não consiga, faça o seguinte:\n  Ir em settings, user settings e na caixa de busca digitar git\n  Verificar se a opção está setada para TRUE\nGit: Auto Repository Detection\nTRUE\n  Setar o path de para o diretório onde os repositórios do github serão clonados. Exemplo:\nGit: Default Clone Repository\n~/git\n  Setar o path onde o VScode escaneará por repositórios git.\n Em Git:Scan Repositories clicar em Edit in settings.json Na tela seguinte copiar as duas linhas da esquerda para direita clicando no ícone de lapis. No lado direito substituir o [] por [\u0026quot;~/git\u0026quot;], ou pelos diretórios onde estão os repos. Exemplo de como deve ficar a linha do lado direito:  \u0026quot;git.scanRepositories\u0026quot;: [\u0026quot;~/git]\u0026quot;\n  Salvar o arquivo User Settings e reiniciar o VSCode.\n  O que foi feito Pronto! Agora é é possível usar o VScode para desenvolver em Python com as seguintes funcionalidades:\n Code snippets Code highlight customizado para Python GIT: Criar e aternar branches, fazer commits, push and pull para github etc. Testar código com pytest (Detecção e execução automática de arquivos test ou test Usar o Debug Rodar aplicação usando terminal interno do VScode. Usar virtual environments com aplicação facilitando o deploy Possibilitar copiar o VScode e/ou suas preferencias para qualquer lugar.  Referências: https://code.visualstudio.com/docs\nhttps://code.visualstudio.com/docs/python/python-tutorial\nhttps://code.visualstudio.com/docs/python/environments\nhttps://code.visualstudio.com/docs/python/debugging\nhttps://code.visualstudio.com/docs/python/linting\nhttps://code.visualstudio.com/docs/python/unit-testing\nhttps://git-scm.com/book/pt-br/v2\nhttps://pythonacademy.com.br/blog/python-e-virtualenv-como-programar-em-ambientes-virtuais\nhttps://pythonhelp.wordpress.com/2012/10/17/virtualenv-ambientes-virtuais-para-desenvolvimento/\nhttps://fedoramagazine.org/vscode-python-howto/\nhttps://www.reddit.com/r/learnpython/comments/4hsudz/pyvenv_vs_virtualenv/\n","description":"","id":42,"section":"posts","tags":["Python","VsCode"],"title":"Configurando o Vscode para programação Python","uri":"https://alansantosmg.netlify.com/pt/posts/2018-11-09-env-python-linux/"},{"content":"O Docker é uma tecnologia que permite a implementação de aplicações em ambientes separados (chamados de containers) da máquina original (host). Dessa forma o desenvolvedor consegue disponibilizar seu software dentro do container de maneira padronizada. Como o container funciona de forma separada do host, o desenvolvedor não tem que se preocupar com as configurações de ambiente.\nInstruções para instalação do Docker no Linux Mint 19 1. Remover versões anteriores do docker sudo apt-get remove docker docker-engine docker.io sudo apt-get update  2. Instalar os pré-requisitos para obtenção do docker sudo apt-get install apt-transport-https ca-certificates curl software-properties-common  3. Obter chave pública de acesso e adicionar o repositório oficial do docker curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\u0026quot; sudo apt-get update  4. Instalar o docker sudo apt-get install docker-ce  5. Testar se a instalação foi bem sucedida Baixar imagem de teste \u0026lsquo;hello-word\u0026rsquo; criar um container e executá-lo. docker run hello-world  Depois verificar se o container existe docker ps -a  ","description":"","id":43,"section":"posts","tags":["Docker"],"title":"Instalando o Docker no Linux Mint","uri":"https://alansantosmg.netlify.com/pt/posts/2018-11-07-docker-linux/"},{"content":"O script abaixo tem por objetivo facilitar a instalação da versão mais atualizada do Docker com todas suas dependências, no Linux Mint.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  #!/bin/bash # This shell script installs docker on Linux Mint 19 - Tara. # You are free to share it. # Autor: Alan Santos. echo \u0026#39;Removing Docker previous version\u0026#39; sudo apt-get remove docker docker-engine docker.io -y sudo apt-get update -y sleep 3 echo \u0026#39;Installing pre-requisites\u0026#39; sudo apt-get install apt-transport-https ca-certificates curl software-properties-common sleep 3 echo \u0026#39;Registering Docker repo\u0026#39; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 -y sudo add-apt-repository \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\u0026#34; -y sudo apt-get update -y sleep 3 echo \u0026#39;Getting Docker\u0026#39; sudo apt-get install docker-ce -y sleep 3 echo \u0026#39;Testing docker\u0026#39; docker run hello-world   ","description":"Para facilitar a instação do Docker no Ubuntu Bionic Beaver, criei um script de instalação em Shell. Ele pode ser adaptado para outras versões do Ubuntu.","id":44,"section":"posts","tags":["Docker"],"title":"Script de instalação do Docker para Linux Mint","uri":"https://alansantosmg.netlify.com/pt/posts/2018-11-07-docker-linux-script/"},{"content":"Se você está pensando em se especializar em uma linguagem de programação nos próximos dois anos, considere o Python entre suas alternativas. Bons motivos não faltam.\n  Em 2 anos IA (mesmo que por moda) vai ser a bola da vez e Python já está na vantagem. Hoje, Python já vem sendo amplamente utilizado para Data Science, Machine Learning e Deep Learning, disciplinas que são pilares em IA. A computação cognitiva avança em grandes empresas como Google, IBM, Amazon e Microsoft. Cada uma dessas empresas tem suas ferramentas e estratégias para se tornarem provedores de IA. O que há de comum entre elas: Python.\n  Mudanças no Java para melhor e para pior. A licença do Java mudou e a partir da v11 se quiser ter suporte da Oracle tem que pagar. Isso pode ser bom pois dá maior segurança aos grandes players que usam a tecnologia e ainda incentiva a Oracle a melhorar ainda mais o Java, mas a própria notícia em si já impacta o mercado de forma negativa, principalmente entre as pequenas e médias empresas. Obviamente é possível usar o Open JDK para novos projetos, mas e o legado? A preocupação aumentará até 2020, data fim do suporte da última versão free do JDK da Oracle.\n  Um pouco mais sobre Java. No Exterior, em vários fóruns tenho visto comentários que as empresas estão trocando o Java por linguagens menos burocráticas em novos projetos. O ritmo das startups é mais rápido que o de grandes empresas. Nesse sentido o Python encaixa como uma luva: fácil de aprender, multiparadigma e ao mesmo tempo com campo de atuação aberto que vai de aplicações web à robótica. O legado de Java é enorme não vai desaparecer e nem deixar de ser uma das mais utilizadas tão cedo (pelo menos nos próximos 15 anos). Assim como já tentaram matar o papel, já tentaram decretar o fim do Java várias vezes. Pura bobagem. Porém, novos tempos significam novos nichos de mercado e principalmente novas oportunidades. Certamente, o ritmo do mercado exigirá (já exige e quem desenvolve em JavaScript sabe disso) linguagens capazes de trazer resultados mais rápidos. Pode ser muito mais vantajoso competir nesse \u0026ldquo;novo\u0026rdquo; mercado e Python pode cumprir bem esse papel com uma segunda vantagem: baixa competitividade profissional.\n  Até 2016 eu nem via vagas de python\u0026hellip; Agora elas já começaram a aparecer e o mais interessante, em determinados casos elas demoram para ser preenchidas pois o mercado ainda não formou profissionais experientes o bastante para assumí-las. No exterior, em alguns sites de trabalho Freelance já tem mais oportunidades em Python do que em outras linguagens como o próprio Java, C#.\n  A dica de especializar numa linguagem vale muito, pois martelo na mão de quem sabe usar tem muito mais utilidade do que ter uma caixa inteira de ferramentas e não saber usar nenhuma direito. (E pra saber usar bem uma ferramenta, qualquer que seja, leva tempo mesmo).\n  Python já vem no Linux e me parece que o Windows (desculpem os fan-boys) está com os dias contados. Mais uma vez, até a MS sabe que está perdendo terreno e tem agora sua própria distribuição Linux. Eles sabem que SO é commodity e o que agrega valor são serviços. Isso só ajuda o Python.\n  O Python vive um momento pelo qual o Java já passou: Nos idos de 98 a 2005 o Java era considerado lento. O que aconteceu? Lei de Moore. O poder de processamento aumentou, o custo Hw baixou. Então para maioria das aplicações, passou a importar pouco o fato do java rodar em jvm. Penso que o mesmo está passando o Python. A lei de Moore continua valendo e logo ninguém vai mais se importar com a velocidade de uma aplicação python para maior parte das coisas. E sendo uma linguagem menos burocrática, tende a acelerar sua adoção. Até a Microsoft (que é a MS) reconhece isso e você já pode programar em Python no Visual Studio ou usá-lo no Azure em soluções de Data Science e Machine Learning.\n  Por todos esses motivos, Python parece ter um futuro mais promissor e pode ser uma boa linguagem para quem quer começar ou mudar de ou mudar o mercado.\nMas lembre-se, em matéria de tecnologia, o futuro é hoje!\n","description":"","id":45,"section":"posts","tags":["Python"],"title":"Programação em Python 2020/2022","uri":"https://alansantosmg.netlify.com/pt/posts/2018-09-27-python-7motivos/"},{"content":"Para usar o GIT corretamente, uma das primeiras coisas que devemos fazer é configurar nosso nome de usuário e e-mail. Esses dados são importantes, pois eles é que aparecerão quando realizarmos um commit. Para fazer isso, abra um terminal em seu diretorio home no linux e digite os comandos:\n1 2  git config --global user.name \u0026#34;YOUR NAME\u0026#34; git config --global user.email \u0026#34;YOUR EMAIL ADDRESS\u0026#34;   Pronto. Agora é só começar a utilizar o GIT.\n","description":"","id":46,"section":"posts","tags":["Git"],"title":"Configurar seu usuário para o GIT","uri":"https://alansantosmg.netlify.com/pt/posts/2018-09-03-user-git/"},{"content":"Quando instalamos alguma distribuição linux, normalmente o ambiente gráfico utilizado já trás consigo seu editor de textos oficial. Por exemplo, no Xbuntu (xfce) o editor é o mousepad, no Ubuntu e mint o editor normalmente é o Gedit e por aí vai. Quem é desenvolvedor costuma utilizar editores mais avançados do que aqueles que se assemelham ao bloco de notas e costumam vir por padrão. Para tornar seu editor de código preferido como padrão, basta seguir os passos abaixo. No caso, estamos fazendo com o editor Visual Studio Code, mas poderia ser o Sublime, Atom, etc.\nAbra um terminal e digite:\nxdg-mime default code.desktop text/plain\nOutra forma de fazer seria utilizar o Mime-Type editor de sua distribuição predileta. Porém via terminal é mais rápido.\n","description":"","id":47,"section":"posts","tags":["VsCode"],"title":"Vscode como editor padrão no Linux","uri":"https://alansantosmg.netlify.com/pt/posts/2018-08-02-vscode-editor-padrao/"},{"content":"Se você usa o navegador Firefox também odeia ter que ficar clicando o tempo todo em \u0026ldquo;não\u0026rdquo; quando um site pede confirmações para ficar te notificando de atualizações, este artigo é para você. Com um pequeno truque é possível NUNCA MAIS ver o irritante pop-up.\n Abra o Firefox e digite about:config na barra de navegação. Na caixa search busque o termo: webnotif. Dê um duplo clique na chave: dom.webnotifications.enabled e altere o valor de true para false. Reinicie o Firefox.  Gestão\nTecnologia\nDevops\nProgramação\nDicas\nCinema\nLivros\nPortifólio\nCurrículo\nSobre\n","description":"","id":48,"section":"posts","tags":["Linux"],"title":"Bloquer notificações no Firefox","uri":"https://alansantosmg.netlify.com/pt/posts/2017-08-08-stop-firefox-notificacoes/"},{"content":"Em instalações dualboot Windows 10/linux o horário do Windows fica incorreto.\nÉ possível corrigir pelo no Linux:\n Verifique se o relógio do Linux está usando UTC:  timedatectl | grep local   Se estiver, mude para local time:  timedatectl set-local-rtc 1   Caso queria desfazer a mudança:  timedatectl set-local-rtc 0    ","description":"","id":49,"section":"posts","tags":["Linux"],"title":"Acertar a hora no Windows/Linux dualboot","uri":"https://alansantosmg.netlify.com/pt/posts/2017-03-02-acerto-relogio-win-dualboot/"},{"content":"Objetivo Gerente de TI | Consultoria | Liderança | Inovação\n23 anos de experiência em Tecnologia da Informação. Ampla atuação em gestão de operações e projetos de TI, liderança de equipes, implantação, suporte, infraestrutura, desenvolvimento e sistemas.\nFormação    Nível Curso Local Data     Mestrado Sistemas de informação FUMEC 07/2014   Pós-grad Gestão estratégica da informação UFMG 12/2006   Tecnólogo Redes de computadores UNA 12/2004   Graduação Publicidade UNI­BH 12/2000    Certificações: PSM1, ITIL Formação complementar    Ano Carga Formação Entidade     2019 ­ 06h ­ SAP - Entendendo suas características Gerais. Digital Innovation One.   2019 ­ 06h ­ C# Primeiros passos. Digital Innovation One.   2019 ­ 06h ­ C# Introdução a Orientação a objetos. Digital Innovation One.   2020 06h ­ RH Tech - Recrutamento e seleção em TI Alura Educação.   2019 ­ 06h ­ Fundamentos para a Criação de produtos digitais. Digital Innovation One.   2019 ­ 01h ­ Modelos de Negócios digitais em Disrupção Digital Innovation One.   2019 ­ 06h ­ Fundamentos de Negócios digitais escaláveis Digital Innovation One.   2019 ­ 03h ­ Mentalidade empreendedora Digital Innovation One.   2019 ­ 02h ­ Fundamentos do Intraempreendorismo Digital Innovation One.   2019 ­ 02h ­ Introdução ao GIT e Controle de versões Digital Innovation One.   2019 ­ 08h ­ Certificação PMP parte 1 ­ Proc. de ger. de projetos Alura Educação.   2019 ­ 12h ­ Jquery ­ A biblioteca mais popular do mercado I Alura Educação.   2019 ­ 20h ­ Javascript ­ Programando a linguagem da web Alura Educação.   2019 ­ 14h ­ Entendendo a Web por baixo dos panos Alura Educação.   2019 ­ 32h ­ HTML5 e CSS3 I: Primeiras páginas Web Alura Educação.   2019 ­ 14h ­ Cobit 5 Foundation I Alura Educação.   2018 ­ 120h Certificação Professional Scrum Master 1 ­ PSM­1 Scrum.org.    Formação em Idiomas:    Idioma Nível     Inglês Avançado   Espanhol Básico    Conhecimentos    Disciplinas Metodologias/Ferramentas/Linguagens     Metodologias Scrum, Kanban, PMI   Ferramentas de gestão Projetos e colaboração MS­Project, Kanboard, Office 365, Microsoft Teams e Planner, Jira, Slack   Governança Itil,Cobit, OKrs, PDCA   Ferramentas de Gestão de processos BPMN, Bizagi, Visio, Visual Paradig, Freeplane, Archimate, Dia, Umbrello   Programação HTML, CSS, Javascript, Python (básico), T-SQL, UML, C#/asp.net (básico),   IDE\u0026rsquo;s Visual Studio, VIM, Vscode   ERP ERP TOTVS, CRM Microsof, Collegium, Midialog   Bancos de dados MS-SQL Server, Mysql   DevOps: Windows Server, Linux, Docker, Azure (Cloud), Lan/Wan, Datacenters   Ferramentas ITSM Webhelpdesk, Ocommon Helpdesk, Jitbit Helpdesk.    Experiência profissional Gerente de TI - Açotel Indústria de Aço (Mai/2020 - Presente)\n Reestruturação da área de TI promovendo transformação digital para alavancar os objetivos estratégicos do negócio. Implantação do Microsoft 365 para geração de alta colaboração em arquivos, projetos e comunicação entre equipes. Implantação de landscape do SAP 4/Hana e projeto de migração de dados. Reorganização das equipes de TI com implantação de métodos ágeis p/ atendimento à demanda de projetos de novas tecnologias. Implementação de governança visando aumento da transparência e eficiência dos processos de TI e gestão de KPIs p/ agilidade da organização.   Consultor de TI, AS - Consulting - Gestão de TI e Governança (Jan/2018 - Mai/2020)\n Desenho e redesenho de processos de negócio utilizando notação BPMN Consultoria local para levantamento de atividades (mapeamento), definição e desenho de processos (as Is). Consultoria local para redesenho e otimização de processos de negócio, definições de papéis e recursos (to be). Consultoria local para definição de processos de Governança de TI, utilizando frameworks ITIL e Cobit. Reestruturação de equipes de tecnologia. Implantação e coaching em Kanban e Scrum.   Gerente de TI - Grupo Bernoulli Educacional - (Jan/2012 a Dez/2017)\n Gerenciamento das equipes de Desenvolvimento, Sistemas e Infra (22 colaboradores). Alinhamento de TI com estratégia da empresa via reuniões de reporte semanal ao board. Melhoria no fluxo de demandas de sistemas com implantação do método ágil Kanban. Implantação de metodologia de gestão de projetos tradicional para área de infra. Implantação da metodologia ágil Scrum no desenvolvimento de software para entregas de alta qualidade. Desenvolvimento de aplicações asp.Net web/mobile p/ clientes internos e externos. Automação backoffice com projetos de revitalização e implantação de módulos do ERP TOTVS RM. Gestão de conhecimento com implementação de comunicação e normativos em Sharepoint online (intranet). Aumento de perfomance, segurança e disponibilidade com migração de aplicações para nuvem Azure. Gerenciamento de segurança via desenvolvimento de plano de contingência e políticas de segurança. Governança de TI via padronização de processos, plataformas, ativos (hardware/software) e gestão de contratos.   Gerente de Projetos - Documentar Tecnologia e informação (Jan/2011 a Dez/2012)\n Gestão da operação de Outsourcing de contratos do Banco Fidis (25 colaboradores). Gestão do projeto de GED do Mineroduto P4P da Samarco Mineração (50 colaboradores). Gestão do Projeto de GED do Banco de Desenvolvimento de Minas Gerais (20 colaboradores). Gestão de projeto de GED e BPM para áreas de operação da Samarco Mineração ES/MG (12 áreas). Gestão de projeto de organização de arquivos da área de compras da FIAT Betim.   Coordenador de Sistemas - Santa Bárbara Engenharia (Out/2009 a Dez/2010)\n Coordenação da equipe de sustentação de Sistemas ERP (TOTVS RM) e verticais. Implantação de service­desk e processos de governança de TI. Prospecção de sistemas para gestão de projetos de engenharia de óleo e gás. Implantação de governança corporativa com Sharepoint (comunicação, gestão do conhecimento, normativos). Desenvolvimento sistema de avaliação de viabilidade comercial entrada em licitações. Gestão de padronização e integração da plataforma de software da organização.   Gerente de TI - Defensoria Pública do Estado MG (Jan/2007 a Out/2009)\n Gerência geral de TI. Orçamento gerido anual: 1,5 milhão. Implantação de TI e suporte a 130 unidades em MG. Projeto e implantação de infra de TI da nova sede. Desenvolvimento de aplicações web p/ diversos setores, intranet e migração da folha de pagto para ERP próprio.   Analista de Sistemas SR.- Ibmec Minas (Jun/2000 a Ago/2006)\n Coordenação das equipes de TI (ERP e Infra). Orçamento anual: 200 mil. Migração e Implantação ERP acadêmico e treinamento dos usuários (2 anos). Mapeamento e redesenho do processos (BPM) de todas as áreas da unidade. Desenvolvimento de sistema para área de atendimento (asp .net). Administração de datacenter: servidores, Databases, Websites, LAN/WAN, links, telefonia e demais ativos de TI.   Analista de Suporte - Propeg Minas Comunicação (06/1998 a Jun/200)\n Implantação ERP de próprio e treinamento dos usuários. Administração de datacenter: servidores, Databases, Websites, LAN/WAN, links, telefonia demais ativos de TI. Suporte a banco de dados.   Auxiliar técnico em Sistemas - Banco Real S.A (05/1990 a 06/1998)\n Administração de infra do Telemarketing MG. (servidores Novell e demais equipamentos). Redação de scripts de atendimento. Carga de mailing e administração de CRM. Geração de relatórios de produção. Escriturário caixa em agência bancária ­ 5 anos.   ","description":"","id":50,"section":"","tags":null,"title":"CV - Alan Santos","uri":"https://alansantosmg.netlify.com/pt/resume/"},{"content":"Os dez mandamentos da preservação digital:  Manterás uma política de preservação. Não dependerás de hardware específico. Não dependerás de software específico. Não confiarás em sistemas gerenciadores como única forma de acesso ao documento digital. Migrarás seus documentos de suporte e formato periodicamente. Replicarás os documentos em locais fisicamente separados. Não confiarás cegamente no suporte de armazenamento. Não deixarás de fazer backups e cópias de segurança. Não preservarás lixo digital. Garantirás a autenticidade dos documentos digitais.  ","description":"","id":51,"section":"posts","tags":["Governança"],"title":"Os dez mandamentos da preservação digital","uri":"https://alansantosmg.netlify.com/pt/posts/2016-08-08-mandamentos-da-preserva%C3%A7%C3%A3o-digital/"},{"content":"Em algumas distribuições, ao instalar uma fonte ou pacote de fontes, as mesmas não são carregadas automaticamente. Para resolver a questão basta forçar a atualização do cache de fontes via terminal.\nApós instalar uma fonte nova, abra um terminal e digite o comando:\nsudo fc-cache –f -v\nDepois que de teclar enter o cache de fontes estará atualizado e as novas fontes disponíveis em todas aplicações.\n","description":"","id":52,"section":"posts","tags":null,"title":"Atualizar cache de fontes - Ubuntu","uri":"https://alansantosmg.netlify.com/pt/posts/2016-05-04-cache-fontes-linux/"}]